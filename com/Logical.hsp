
    if ( vbin_CPUmeirei_Main == 0x30 ) : { // AND(B)

        // パラメータの種類
        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
        vbin_CPUmeirei_Prm.2 = ( vbin_CPUmeirei_Prm.0 && 0x0F )

        switch vbin_CPUmeirei_Prm.2
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgh( vint_CPUparam.1 -0x30 )

            }
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgl( vint_CPUparam.1 -0x40 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.1 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.1 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.1 -0x30 )

            }
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.1 -0x40 )

            }
            vbin_CPUtmp.1 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        case 0x04 // 即値
            vbin_CPUtmp.1 = vint_CPUparam.1
        swbreak
        swend



        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.0 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.0 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
            vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        swend

        vbin_CPUtmp.0 = vbin_CPUtmp.0 && vbin_CPUtmp.1

        ClearFlag fOF || fCF
        checkFlagB vbin_CPUtmp.0, ( fSF || fZF || fPF )
        checkDataB vbin_CPUtmp.0

        switch vbin_CPUmeirei_Prm.1
        case 0x01
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                writeRegisterBgh vint_CPUparam.0 -0x30, vbin_CPUtmp.0

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                writeRegisterBgl vint_CPUparam.0 -0x40, vbin_CPUtmp.0

            }
        swbreak
        case 0x02
            poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
        swbreak
        case 0x03
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
            poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
        swbreak
        swend

        return

    }

    if ( vbin_CPUmeirei_Main == 0x31 ) : { // AND(W)

        // パラメータの種類
        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
        vbin_CPUmeirei_Prm.2 = ( vbin_CPUmeirei_Prm.0 && 0x0F )

        switch vbin_CPUmeirei_Prm.2
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.1 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.1 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.1 )

            }
            vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        case 0x04 // 即値
            vbin_CPUtmp.1 = vint_CPUparam.1
        swbreak
        swend



        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.0 = fetchRegisterWg( vint_CPUparam.0 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.0 )

            }
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        swend

        vbin_CPUtmp.0 = vbin_CPUtmp.0 && vbin_CPUtmp.1
        
        clearFlag ( fOF || fCF )
        checkFlagW vbin_CPUtmp.0, ( fSF || fZF || fPF )
        checkDataW vbin_CPUtmp.0


        switch vbin_CPUmeirei_Prm.1
        case 0x01
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                writeRegisterWg vint_CPUparam.0, vbin_CPUtmp.0

            }
        swbreak
        case 0x02
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
        swbreak
        case 0x03
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.0 )

            }
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
        swbreak
        swend

        return

    }

    if ( vbin_CPUmeirei_Main == 0x32 ) : { // OR(B)

        // パラメータの種類
        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
        vbin_CPUmeirei_Prm.2 = ( vbin_CPUmeirei_Prm.0 && 0x0F )

        switch vbin_CPUmeirei_Prm.2
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgh( vint_CPUparam.1 -0x30 )

            }
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgl( vint_CPUparam.1 -0x40 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.1 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.1 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.1 -0x30 )

            }
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.1 -0x40 )

            }
            vbin_CPUtmp.1 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        case 0x04 // 即値
            vbin_CPUtmp.1 = vint_CPUparam.1
        swbreak
        swend



        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.0 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.0 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
            vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        swend

        vbin_CPUtmp.0 = vbin_CPUtmp.0 || vbin_CPUtmp.1

        ClearFlag fOF || fCF
        checkFlagB vbin_CPUtmp.0, ( fSF || fZF || fPF )
        checkDataB vbin_CPUtmp.0

        switch vbin_CPUmeirei_Prm.1
        case 0x01
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                writeRegisterBgh vint_CPUparam.0 -0x30, vbin_CPUtmp.0

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                writeRegisterBgl vint_CPUparam.0 -0x40, vbin_CPUtmp.0

            }
        swbreak
        case 0x02
            poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
        swbreak
        case 0x03
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
            poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
        swbreak
        swend

        return

    }

    if ( vbin_CPUmeirei_Main == 0x33 ) : { // OR(W)

        // パラメータの種類
        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
        vbin_CPUmeirei_Prm.2 = ( vbin_CPUmeirei_Prm.0 && 0x0F )

        switch vbin_CPUmeirei_Prm.2
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.1 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.1 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.1 )

            }
            vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        case 0x04 // 即値
            vbin_CPUtmp.1 = vint_CPUparam.1
        swbreak
        swend



        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.0 = fetchRegisterWg( vint_CPUparam.0 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.0 )

            }
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        swend

        vbin_CPUtmp.0 = vbin_CPUtmp.0 || vbin_CPUtmp.1
        
        clearFlag ( fOF || fCF )
        checkFlagW vbin_CPUtmp.0, ( fSF || fZF || fPF )
        checkDataW vbin_CPUtmp.0


        switch vbin_CPUmeirei_Prm.1
        case 0x01
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                writeRegisterWg vint_CPUparam.0, vbin_CPUtmp.0

            }
        swbreak
        case 0x02
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
        swbreak
        case 0x03
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.0 )

            }
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
        swbreak
        swend

        return

    }

    if ( vbin_CPUmeirei_Main == 0x34 ) : { // XOR(B)

        // パラメータの種類
        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
        vbin_CPUmeirei_Prm.2 = ( vbin_CPUmeirei_Prm.0 && 0x0F )

        switch vbin_CPUmeirei_Prm.2
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgh( vint_CPUparam.1 -0x30 )

            }
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgl( vint_CPUparam.1 -0x40 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.1 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.1 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.1 -0x30 )

            }
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.1 -0x40 )

            }
            vbin_CPUtmp.1 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        case 0x04 // 即値
            vbin_CPUtmp.1 = vint_CPUparam.1
        swbreak
        swend



        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.0 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.0 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
            vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        swend

        vbin_CPUtmp.0 = vbin_CPUtmp.0 ^ vbin_CPUtmp.1
        
        ClearFlag fOF || fCF
        checkFlagB vbin_CPUtmp.0, ( fSF || fZF || fPF )
        checkDataB vbin_CPUtmp.0

        switch vbin_CPUmeirei_Prm.1
        case 0x01
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                writeRegisterBgh vint_CPUparam.0 -0x30, vbin_CPUtmp.0

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                writeRegisterBgl vint_CPUparam.0 -0x40, vbin_CPUtmp.0

            }
        swbreak
        case 0x02
            poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
        swbreak
        case 0x03
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
            poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
        swbreak
        swend

        return

    }

    if ( vbin_CPUmeirei_Main == 0x35 ) : { // XOR(W)

        // パラメータの種類
        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
        vbin_CPUmeirei_Prm.2 = ( vbin_CPUmeirei_Prm.0 && 0x0F )

        switch vbin_CPUmeirei_Prm.2
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.1 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.1 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.1 )

            }
            vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        case 0x04 // 即値
            vbin_CPUtmp.1 = vint_CPUparam.1
        swbreak
        swend



        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.0 = fetchRegisterWg( vint_CPUparam.0 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.0 )

            }
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        swend

        vbin_CPUtmp.0 = vbin_CPUtmp.0 ^ vbin_CPUtmp.1
        
        clearFlag ( fOF || fCF )
        checkFlagW vbin_CPUtmp.0, ( fSF || fZF || fPF )
        checkDataW vbin_CPUtmp.0


        switch vbin_CPUmeirei_Prm.1
        case 0x01
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                writeRegisterWg vint_CPUparam.0, vbin_CPUtmp.0

            }
        swbreak
        case 0x02
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
        swbreak
        case 0x03
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.0 )

            }
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
        swbreak
        swend

        return

    }

    if ( vbin_CPUmeirei_Main == 0x36 ) : { // NEG(B)

        // パラメータの種類
        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )

        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.0 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.0 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
            vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        swend

        vbin_CPUtmp.0 = vbin_CPUtmp.0 ^ -1
        vbin_CPUtmp.0 ++
        checkDataB vbin_CPUtmp.0

        switch vbin_CPUmeirei_Prm.1
        case 0x01
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                writeRegisterBgh vint_CPUparam.0 -0x30, vbin_CPUtmp.0

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                writeRegisterBgl vint_CPUparam.0 -0x40, vbin_CPUtmp.0

            }
        swbreak
        case 0x02
            poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
        swbreak
        case 0x03
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
            poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
        swbreak
        swend

        return

    }

    if ( vbin_CPUmeirei_Main == 0x37 ) : { // NEG(W)

        // パラメータの種類
        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )

        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.0 = fetchRegisterWg( vint_CPUparam.0 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.0 )

            }
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        swend

        vbin_CPUtmp.0 = vbin_CPUtmp.0 ^ -1
        vbin_CPUtmp.0 ++
        checkDataW vbin_CPUtmp.0

        switch vbin_CPUmeirei_Prm.1
        case 0x01
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                writeRegisterWg vint_CPUparam.0, vbin_CPUtmp.0

            }
        swbreak
        case 0x02
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
        swbreak
        case 0x03
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.0 )

            }
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
        swbreak
        swend

        return

    }

    if ( vbin_CPUmeirei_Main == 0x38 ) : { // NOT(B)

        // パラメータの種類
        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )

        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.0 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.0 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
            vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        swend

        vbin_CPUtmp.0 = vbin_CPUtmp.0 ^ -1
        checkDataB vbin_CPUtmp.0

        switch vbin_CPUmeirei_Prm.1
        case 0x01
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                writeRegisterBgh vint_CPUparam.0 -0x30, vbin_CPUtmp.0

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                writeRegisterBgl vint_CPUparam.0 -0x40, vbin_CPUtmp.0

            }
        swbreak
        case 0x02
            poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
        swbreak
        case 0x03
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

                vbin_CPUtmp.1 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

            }
            poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
        swbreak
        swend

        return

    }

    if ( vbin_CPUmeirei_Main == 0x39 ) : { // NOT(W)

        // パラメータの種類
        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )

        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.0 = fetchRegisterWg( vint_CPUparam.0 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.0 )

            }
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        swend

        vbin_CPUtmp.0 = vbin_CPUtmp.0 ^ -1
        checkDataW vbin_CPUtmp.0

        switch vbin_CPUmeirei_Prm.1
        case 0x01
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                writeRegisterWg vint_CPUparam.0, vbin_CPUtmp.0

            }
        swbreak
        case 0x02
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
        swbreak
        case 0x03
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.0 )

            }
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
        swbreak
        swend

        return

    }

    if ( vbin_CPUmeirei_Main == 0x3E ) : { // SHL(B)

       // パラメータの種類
       vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
       vbin_CPUmeirei_Prm.2 = ( vbin_CPUmeirei_Prm.0 && 0x0F )

       switch vbin_CPUmeirei_Prm.2
       case 0x01 // レジスタ
           if ( ( vint_CPUparam.1 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.1 = fetchRegisterBgh( vint_CPUparam.1 -0x30 )

           }
           if ( ( vint_CPUparam.1 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.1 = fetchRegisterBgl( vint_CPUparam.1 -0x40 )

           }
       swbreak
       case 0x02 // メモリ
           vbin_CPUtmp.1 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.1 )
       swbreak
       case 0x03 // レジスタp
           if ( ( vint_CPUparam.1 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.1 -0x30 )

           }
           if ( ( vint_CPUparam.1 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.1 -0x40 )

           }
           vbin_CPUtmp.1 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
       swbreak
       case 0x04 // 即値
           vbin_CPUtmp.1 = vint_CPUparam.1
       swbreak
       swend



       switch vbin_CPUmeirei_Prm.1
       case 0x01 // レジスタ
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.0 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

           }
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.0 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

           }
       swbreak
       case 0x02 // メモリ
           vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
       swbreak
       case 0x03 // レジスタp
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

           }
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

           }
           vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
       swbreak
       swend

       vbin_CPUtmp.0 = vbin_CPUtmp.0 << vbin_CPUtmp.1
       
       ClearFlag fOF || fCF
       checkFlagB vbin_CPUtmp.0, ( fSF || fZF || fPF )
       checkDataB vbin_CPUtmp.0

       switch vbin_CPUmeirei_Prm.1
       case 0x01
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               writeRegisterBgh vint_CPUparam.0 -0x30, vbin_CPUtmp.0

           }
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               writeRegisterBgl vint_CPUparam.0 -0x40, vbin_CPUtmp.0

           }
       swbreak
       case 0x02
           poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
       swbreak
       case 0x03
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.1 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

           }
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.1 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

           }
           poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
       swbreak
       swend

       return

    }

    if ( vbin_CPUmeirei_Main == 0x3F ) : { // SHL(W)

        // パラメータの種類
        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
        vbin_CPUmeirei_Prm.2 = ( vbin_CPUmeirei_Prm.0 && 0x0F )

        switch vbin_CPUmeirei_Prm.2
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.1 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.1 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.1 )

            }
            vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        case 0x04 // 即値
            vbin_CPUtmp.1 = vint_CPUparam.1
        swbreak
        swend



        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.0 = fetchRegisterWg( vint_CPUparam.0 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.0 )

            }
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        swend

        vbin_CPUtmp.0 = vbin_CPUtmp.0 << vbin_CPUtmp.1
        
        clearFlag ( fOF || fCF )
        checkFlagW vbin_CPUtmp.0, ( fSF || fZF || fPF )
        checkDataW vbin_CPUtmp.0


        switch vbin_CPUmeirei_Prm.1
        case 0x01
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                writeRegisterWg vint_CPUparam.0, vbin_CPUtmp.0

            }
        swbreak
        case 0x02
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
        swbreak
        case 0x03
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.0 )

            }
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
        swbreak
        swend

        return

    }

    if ( vbin_CPUmeirei_Main == 0x40 ) : { // SHR(B)

       // パラメータの種類
       vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
       vbin_CPUmeirei_Prm.2 = ( vbin_CPUmeirei_Prm.0 && 0x0F )

       switch vbin_CPUmeirei_Prm.2
       case 0x01 // レジスタ
           if ( ( vint_CPUparam.1 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.1 = fetchRegisterBgh( vint_CPUparam.1 -0x30 )

           }
           if ( ( vint_CPUparam.1 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.1 = fetchRegisterBgl( vint_CPUparam.1 -0x40 )

           }
       swbreak
       case 0x02 // メモリ
           vbin_CPUtmp.1 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.1 )
       swbreak
       case 0x03 // レジスタp
           if ( ( vint_CPUparam.1 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.1 -0x30 )

           }
           if ( ( vint_CPUparam.1 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.1 -0x40 )

           }
           vbin_CPUtmp.1 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
       swbreak
       case 0x04 // 即値
           vbin_CPUtmp.1 = vint_CPUparam.1
       swbreak
       swend



       switch vbin_CPUmeirei_Prm.1
       case 0x01 // レジスタ
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.0 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

           }
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.0 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

           }
       swbreak
       case 0x02 // メモリ
           vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
       swbreak
       case 0x03 // レジスタp
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

           }
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

           }
           vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
       swbreak
       swend

       vbin_CPUtmp.0 = RBS( vbin_CPUtmp.0, vbin_CPUtmp.1 )
       
       ClearFlag fOF || fCF
       checkFlagB vbin_CPUtmp.0, ( fSF || fZF || fPF )
       checkDataB vbin_CPUtmp.0

       switch vbin_CPUmeirei_Prm.1
       case 0x01
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               writeRegisterBgh vint_CPUparam.0 -0x30, vbin_CPUtmp.0

           }
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               writeRegisterBgl vint_CPUparam.0 -0x40, vbin_CPUtmp.0

           }
       swbreak
       case 0x02
           poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
       swbreak
       case 0x03
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.1 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

           }
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.1 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

           }
           poke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
       swbreak
       swend

       return

    }

    if ( vbin_CPUmeirei_Main == 0x41 ) : { // SHR(W)

        // パラメータの種類
        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
        vbin_CPUmeirei_Prm.2 = ( vbin_CPUmeirei_Prm.0 && 0x0F )

        switch vbin_CPUmeirei_Prm.2
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.1 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.1 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.1 )

            }
            vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        case 0x04 // 即値
            vbin_CPUtmp.1 = vint_CPUparam.1
        swbreak
        swend



        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.0 = fetchRegisterWg( vint_CPUparam.0 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.0 )

            }
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        swend

        vbin_CPUtmp.0 = RBS( vbin_CPUtmp.0, vbin_CPUtmp.1 )
        
        clearFlag ( fOF || fCF )
        checkFlagW vbin_CPUtmp.0, ( fSF || fZF || fPF )
        checkDataW vbin_CPUtmp.0


        switch vbin_CPUmeirei_Prm.1
        case 0x01
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                writeRegisterWg vint_CPUparam.0, vbin_CPUtmp.0

            }
        swbreak
        case 0x02
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vint_CPUparam.0, vbin_CPUtmp.0
        swbreak
        case 0x03
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.0 )

            }
            wpoke emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 +vbin_CPUtmp.1, vbin_CPUtmp.0
        swbreak
        swend

        return

    }

    if ( vbin_CPUmeirei_Main == 0x42 ) : { // TEST(B)

       // パラメータの種類
       vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
       vbin_CPUmeirei_Prm.2 = ( vbin_CPUmeirei_Prm.0 && 0x0F )

       switch vbin_CPUmeirei_Prm.2
       case 0x01 // レジスタ
           if ( ( vint_CPUparam.1 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.1 = fetchRegisterBgh( vint_CPUparam.1 -0x30 )

           }
           if ( ( vint_CPUparam.1 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.1 = fetchRegisterBgl( vint_CPUparam.1 -0x40 )

           }
       swbreak
       case 0x02 // メモリ
           vbin_CPUtmp.1 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.1 )
       swbreak
       case 0x03 // レジスタp
           if ( ( vint_CPUparam.1 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.1 -0x30 )

           }
           if ( ( vint_CPUparam.1 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.1 -0x40 )

           }
           vbin_CPUtmp.1 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
       swbreak
       case 0x04 // 即値
           vbin_CPUtmp.1 = vint_CPUparam.1
       swbreak
       swend



       switch vbin_CPUmeirei_Prm.1
       case 0x01 // レジスタ
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.0 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

           }
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.0 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

           }
       swbreak
       case 0x02 // メモリ
           vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
       swbreak
       case 0x03 // レジスタp
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x30 ) : { // パラメータ1の上位4bitが0x03の場合（汎用BYTE_HIGHレジスタ）

               vbin_CPUtmp.2 = fetchRegisterBgh( vint_CPUparam.0 -0x30 )

           }
           if ( ( vint_CPUparam.0 && 0xF0 ) == 0x40 ) : { // パラメータ1の上位4bitが0x04の場合（汎用BYTE_LOW レジスタ）

               vbin_CPUtmp.2 = fetchRegisterBgl( vint_CPUparam.0 -0x40 )

           }
           vbin_CPUtmp.0 = peek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
       swbreak
       swend

       vbin_CPUtmp.0 = vbin_CPUtmp.0 && vbin_CPUtmp.1
       
       checkFlagB vbin_CPUtmp.0, ( fSF || fZF || fPF )
       checkDataB vbin_CPUtmp.0

       return

    }

    if ( vbin_CPUmeirei_Main == 0x43 ) : { // TEST(W)

        // パラメータの種類
        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
        vbin_CPUmeirei_Prm.2 = ( vbin_CPUmeirei_Prm.0 && 0x0F )

        switch vbin_CPUmeirei_Prm.2
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.1 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.1 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.1 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.1 )

            }
            vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        case 0x04 // 即値
            vbin_CPUtmp.1 = vint_CPUparam.1
        swbreak
        swend



        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : {

                vbin_CPUtmp.0 = fetchRegisterWg( vint_CPUparam.0 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { 

                vbin_CPUtmp.2 = fetchRegisterWg( vint_CPUparam.0 )

            }
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.2 )
        swbreak
        swend

        vbin_CPUtmp.0 = vbin_CPUtmp.0 && vbin_CPUtmp.1
        
        checkFlagW vbin_CPUtmp.0, ( fSF || fZF || fPF )
        checkDataW vbin_CPUtmp.0

        return

    }
