
    if ( vbin_CPUmeirei_Main == 0x70 ) : { // HLT

        if ( vint_isEnablePutTrace_HLT ) : halted fetchRegisterWs(rCS), fetchRegisterWe(rIP), 1, emu_vint_executedCmd, gettick(0)

        repeat

            if ( ( cnt \ CPU_CLOCK_CYCLE  ) == 0 ) : await CPU_CLOCK_WAIT

            if ( isSetInterrupt() and ( ( fetchRegisterWe(rFL) && fIF ) == fIF ) ) {

                break

            }

            if ( emu_vbin_needReboot ) : break
                
        loop

        return

    }

    if ( vbin_CPUmeirei_Main == 0x71 ) : { // INT

        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
        switch vbin_CPUmeirei_Prm.1
        case 0x04 // 即値
            vbin_CPUtmp.0 = vint_CPUparam.0
        swbreak
        swend

        vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, vbin_CPUtmp.0 * 4 )         // オフセット
        vbin_CPUtmp.2 = wpeek( emu_vbin_Memory, vbin_CPUtmp.0 * 4 +2 )      // セグメント

        if ( vint_isEnablePutTrace_CALL ) : calling fetchRegisterWs(rCS), fetchRegisterWe(rIP), vbin_CPUtmp.2, vbin_CPUtmp.1, 1, emu_vint_executedCmd, gettick(0)

        vbin_CPUtmp.3 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.3)
        writeRegisterWg rSP, vbin_CPUtmp.3
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWe(rFL)

        vbin_CPUtmp.3 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.3)
        writeRegisterWg rSP, vbin_CPUtmp.3
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWs(rCS)
        writeRegisterWs rCS, vbin_CPUtmp.2

        vbin_CPUtmp.3 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.3)
        writeRegisterWg rSP, vbin_CPUtmp.3
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWe(rIP)
        writeRegisterWe rIP, vbin_CPUtmp.1

        return

    }

    if ( vbin_CPUmeirei_Main == 0x72 ) : { // INT3

        vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, 3 * 4 )
        vbin_CPUtmp.2 = wpeek( emu_vbin_Memory, 3 * 4 +2 )

        if ( vint_isEnablePutTrace_CALL ) : calling fetchRegisterWs(rCS), fetchRegisterWe(rIP), vbin_CPUtmp.2, vbin_CPUtmp.1, 2, emu_vint_executedCmd, gettick(0)

        vbin_CPUtmp.3 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.3)
        writeRegisterWg rSP, vbin_CPUtmp.3
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWe(rFL)

        vbin_CPUtmp.3 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.3)
        writeRegisterWg rSP, vbin_CPUtmp.3
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWs(rCS)
        writeRegisterWs rCS, vbin_CPUtmp.2

        vbin_CPUtmp.3 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.3)
        writeRegisterWg rSP, vbin_CPUtmp.3
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWe(rIP)
        writeRegisterWe rIP, vbin_CPUtmp.1

        return

    }

    if ( vbin_CPUmeirei_Main == 0x73 ) : { // INTO

        if ( TestFlag(fOF) != fOF ) : {

            return
            
        }

        vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, 4 * 4 )
        vbin_CPUtmp.2 = wpeek( emu_vbin_Memory, 4 * 4 +2 )

        if ( vint_isEnablePutTrace_CALL ) : calling fetchRegisterWs(rCS), fetchRegisterWe(rIP), vbin_CPUtmp.2, vbin_CPUtmp.1, 3, emu_vint_executedCmd, gettick(0)

        vbin_CPUtmp.3 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.3)
        writeRegisterWg rSP, vbin_CPUtmp.3
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWe(rFL)

        vbin_CPUtmp.3 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.3)
        writeRegisterWg rSP, vbin_CPUtmp.3
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWs(rCS)
        writeRegisterWs rCS, vbin_CPUtmp.2

        vbin_CPUtmp.3 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.3)
        writeRegisterWg rSP, vbin_CPUtmp.3
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWe(rIP)
        writeRegisterWe rIP, vbin_CPUtmp.1

        return

    }

    if ( vbin_CPUmeirei_Main == 0x7A ) : { // CALL

        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { // パラメータ1の上位4bitが0x00の場合（汎用WORDレジスタ）

                vbin_CPUtmp.0 = fetchRegisterWg( vint_CPUparam.0 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x10 ) : { // パラメータ1の上位4bitが0x01の場合（WORDセグメントレジスタ）

                vbin_CPUtmp.0 = fetchRegisterWs( vint_CPUparam.0 -0x10 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { // パラメータ1の上位4bitが0x00の場合（汎用WORDレジスタ）

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.0 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x10 ) : { // パラメータ1の上位4bitが0x01の場合（WOEDセグメントレジスタ）

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.0 -0x10 )

            }
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.1 )
        swbreak
        case 0x04 // 即値
            vbin_CPUtmp.0 = vint_CPUparam.0
        swbreak
        swend

        if ( vint_isEnablePutTrace_CALL ) : calling fetchRegisterWs(rCS), fetchRegisterWe(rIP), fetchRegisterWs(rCS), vbin_CPUtmp.0, 4, emu_vint_executedCmd, gettick(0)

        vbin_CPUtmp.1 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.1)
        writeRegisterWg rSP, vbin_CPUtmp.1
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWe(rIP)
        writeRegisterWe rIP, vbin_CPUtmp.0

        return

    }

    if ( vbin_CPUmeirei_Main == 0x7B ) : { // RET

        vint_CPUtmp = wpeek ( emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP) )

        if ( vint_isEnablePutTrace_RET ) : returned fetchRegisterWs(rCS), fetchRegisterWe(rIP), fetchRegisterWs(rCS), vint_CPUtmp, 1, emu_vint_executedCmd, gettick(0)

        writeRegisterWe rIP, vint_CPUtmp
        vbin_CPUtmp.0 = fetchRegisterWg(rSP) +2
        checkDataW(vbin_CPUtmp.0)
        writeRegisterWg rSP, vbin_CPUtmp.0

        return

    }

    if ( vbin_CPUmeirei_Main == 0x7C ) : { // CALLF

        vbin_CPUmeirei_Prm.1 = RBS ( vbin_CPUmeirei_Prm.0 && 0xF0, 4 )
        switch vbin_CPUmeirei_Prm.1
        case 0x01 // レジスタ
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { // パラメータ1の上位4bitが0x00の場合（汎用WORDレジスタ）

                vbin_CPUtmp.0 = fetchRegisterWg( vint_CPUparam.0 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x10 ) : { // パラメータ1の上位4bitが0x01の場合（WORDセグメントレジスタ）

                vbin_CPUtmp.0 = fetchRegisterWs( vint_CPUparam.0 -0x10 )

            }
        swbreak
        case 0x02 // メモリ
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vint_CPUparam.0 )
        swbreak
        case 0x03 // レジスタp
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x00 ) : { // パラメータ1の上位4bitが0x00の場合（汎用WORDレジスタ）

                vbin_CPUtmp.1 = fetchRegisterWg( vint_CPUparam.0 )

            }
            if ( ( vint_CPUparam.0 && 0xF0 ) == 0x10 ) : { // パラメータ1の上位4bitが0x01の場合（WOEDセグメントレジスタ）

                vbin_CPUtmp.1 = fetchRegisterWs( vint_CPUparam.0 -0x10 )

            }
            vbin_CPUtmp.0 = wpeek( emu_vbin_Memory, fetchRegisterWs(rDS) *0x10 + vbin_CPUtmp.1 )
        swbreak
        case 0x04 // 即値
            vbin_CPUtmp.0 = vint_CPUparam.0
        swbreak
        swend

        if ( vint_isEnablePutTrace_CALL ) : calling fetchRegisterWs(rCS), fetchRegisterWe(rIP), vbin_CPUtmp.0, 0, 5, emu_vint_executedCmd, gettick(0)

        vbin_CPUtmp.1 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.1)
        writeRegisterWg rSP, vbin_CPUtmp.1
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWs(rCS)

        vbin_CPUtmp.1 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.1)
        writeRegisterWg rSP, vbin_CPUtmp.1
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWe(rIP)

        writeRegisterWs rCS, vbin_CPUtmp.0
        writeRegisterWe rIP, 0

        return

    }

    if ( vbin_CPUmeirei_Main == 0x7D ) : { // FRET

        vbin_CPUtmp.2 = fetchRegisterWs(rCS)
        vbin_CPUtmp.3 = fetchRegisterWe(rIP)

        writeRegisterWe rIP, wpeek ( emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP) )
        vbin_CPUtmp.0 = fetchRegisterWg(rSP) +2
        checkDataW(vbin_CPUtmp.0)
        writeRegisterWg rSP, vbin_CPUtmp.0

        writeRegisterWs rCS, wpeek ( emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP) )
        vbin_CPUtmp.0 = fetchRegisterWg(rSP) +2
        checkDataW(vbin_CPUtmp.0)
        writeRegisterWg rSP, vbin_CPUtmp.0

        if ( vint_isEnablePutTrace_RET ) : returned vbin_CPUtmp.2, vbin_CPUtmp.3, fetchRegisterWs(rCS), fetchRegisterWe(rIP), 2, emu_vint_executedCmd, gettick(0)

        return

    }

    if ( vbin_CPUmeirei_Main == 0x7E ) : { // IRET

        vbin_CPUtmp.2 = fetchRegisterWs(rCS)
        vbin_CPUtmp.3 = fetchRegisterWe(rIP)

        writeRegisterWe rIP, wpeek ( emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP) )
        vbin_CPUtmp.0 = fetchRegisterWg(rSP) +2
        checkDataW(vbin_CPUtmp.0)
        writeRegisterWg rSP, vbin_CPUtmp.0

        writeRegisterWs rCS, wpeek ( emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP) )
        vbin_CPUtmp.0 = fetchRegisterWg(rSP) +2
        checkDataW(vbin_CPUtmp.0)
        writeRegisterWg rSP, vbin_CPUtmp.0

        writeRegisterWe rFL, wpeek ( emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP) )
        vbin_CPUtmp.0 = fetchRegisterWg(rSP) +2
        checkDataW(vbin_CPUtmp.0)
        writeRegisterWg rSP, vbin_CPUtmp.0

        if ( vint_isEnablePutTrace_RET ) : returned vbin_CPUtmp.2, vbin_CPUtmp.3, fetchRegisterWs(rCS), fetchRegisterWe(rIP), 3, emu_vint_executedCmd, gettick(0)

        return

    }

    if ( vbin_CPUmeirei_Main == 0x7F ) : { // CCS

        if ( ( fetchRegisterWs(rCS) && 0xF000 ) != 0 ) : return

        if ( vint_isEnablePutTrace_CHANGE ) : changed fetchRegisterWs(rCS), fetchRegisterWe(rIP), 0, fetchRegisterWs(rCS) *0x10 + fetchRegisterWe(rIP), 1, emu_vint_executedCmd, gettick(0)

        writeRegisterWe rIP, fetchRegisterWs(rCS) *0x10 + fetchRegisterWe(rIP)
        writeRegisterWs rCS, 0

        return

    }

    if ( vbin_CPUmeirei_Main == 0xFD ) : { // DBG

        vbin_CPUtmp.0 = fetchRegisterWe(rFL)

        vbin_CPUtmpS.0 = ""
        repeat 16
            
            switch cnt
            case 0
                if ( vbin_CPUtmp && fCF ) : vbin_CPUtmpS.0 += "C" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 2
                if ( vbin_CPUtmp && fPF ) : vbin_CPUtmpS.0 += "P" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 4
                if ( vbin_CPUtmp && fAF ) : vbin_CPUtmpS.0 += "A" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 6
                if ( vbin_CPUtmp && fZF ) : vbin_CPUtmpS.0 += "Z" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 7
                if ( vbin_CPUtmp && fSF ) : vbin_CPUtmpS.0 += "S" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 8
                if ( vbin_CPUtmp && fTF ) : vbin_CPUtmpS.0 += "T" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 9
                if ( vbin_CPUtmp && fIF ) : vbin_CPUtmpS.0 += "I" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 10
                if ( vbin_CPUtmp && fDF ) : vbin_CPUtmpS.0 += "D" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 11
                if ( vbin_CPUtmp && fOF ) : vbin_CPUtmpS.0 += "O" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            swend

        loop

        putmes_msglib "AX="+ strf("%04X", fetchRegisterWg(rAX)) +" BX="+ strf("%04X", fetchRegisterWg(rBX)) +" CX="+ strf("%04X", fetchRegisterWg(rCX)) +" DX="+ strf("%04X", fetchRegisterWg(rDX)) +" SI="+ strf("%04X", fetchRegisterWg(rSI)) +" DI="+ strf("%04X", fetchRegisterWg(rDI)) +" BP="+ strf("%04X", fetchRegisterWg(rBP)) +" SP="+ strf("%04X", fetchRegisterWg(rSP)) +"\n", SCREEN_DEBUGLOG_ID
        putmes_msglib "CS="+ strf("%04X", fetchRegisterWs(rCS)) +" DS="+ strf("%04X", fetchRegisterWs(rDS)) +" ES="+ strf("%04X", fetchRegisterWs(rES)) +" SS="+ strf("%04X", fetchRegisterWs(rSS)) +" IP="+ strf("%04X", fetchRegisterWe(rIP)) +" "+ vbin_CPUtmpS.0 +"\n", SCREEN_DEBUGLOG_ID
        putmes_msglib "TIME="+ gettick(0) +" ms\n", SCREEN_DEBUGLOG_ID
        putmes_msglib "TICK="+ emu_vint_executedCmd +"\n\n", SCREEN_DEBUGLOG_ID

        return

    }

    if ( vbin_CPUmeirei_Main == 0xFE ) : { // UD2

        vbin_CPUtmp.1 = wpeek( emu_vbin_Memory, 6 * 4 )
        vbin_CPUtmp.2 = wpeek( emu_vbin_Memory, 6 * 4 +2 )

        if ( vint_isEnablePutTrace_UD2 ) : calling fetchRegisterWs(rCS), fetchRegisterWe(rIP), vbin_CPUtmp.2, vbin_CPUtmp.1, 6, emu_vint_executedCmd, gettick(0)

        vbin_CPUtmp.3 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.3)
        writeRegisterWg rSP, vbin_CPUtmp.3
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWe(rFL)

        vbin_CPUtmp.3 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.3)
        writeRegisterWg rSP, vbin_CPUtmp.3
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWs(rCS)
        writeRegisterWs rCS, vbin_CPUtmp.2

        vbin_CPUtmp.3 = fetchRegisterWg(rSP) -2
        checkDataW(vbin_CPUtmp.3)
        writeRegisterWg rSP, vbin_CPUtmp.3
        wpoke emu_vbin_Memory, fetchRegisterWs(rSS) *0x10 + fetchRegisterWg(rSP), fetchRegisterWe(rIP)
        writeRegisterWe rIP, vbin_CPUtmp.1

        return

    }