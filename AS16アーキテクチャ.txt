対応命令

	r8		AH, AL, BH, BL, CH, CL, DH, DLの8bit汎用レジスタ。
	r16		AX, BX, CX, DX, SI, DI, SP, BPの16bit汎用レジスタ。
	m8		メモリ内BYTEサイズオペランド。暗示的にDSレジスタがセグメントレジスタとして使用されます
	m16		メモリ内WORDサイズオペランド。暗示的にDSレジスタがセグメントレジスタとして使用されます
	r/m8	r8またはm8のBYTEサイズオペランド
	r/m16	r16またはm16のWORDサイズオペランド
	sreg	CS, DS, ES, SSのいずれかのセグメントレジスタ
	imm8	BYTEサイズ即値
	imm16	WORDサイズ即値

	読み方

		MOV ←(1)
			
			↓(2)	↓(3)	↓(4)
			0x10	movb	dest[r/m8,imm8], src[r/m8,imm8]
			0x11	movw	dest[r/m16,sreg,imm16], src[r/m16,sreg,imm16]

			データを転送します。 ←(5)

			dest ← src ←(6)

			変更されるフラグ ←(7)
			(なし)

	(1)...アセンブラ上で識別されるニーモニック
	(2)...命令コード
	(3)...命令コードに対応する論理ニーモニック（無意味）
	(4)...使用可能なオペランドの種類
	(5)...説明
	(6)...命令の挙動を示す
	(7)...命令実行後のフラグレジスタへの影響
			

	MOV
		0x10	movb	dest[r/m8,imm8] src[r/m8,imm8]
		0x11	movw	dest[r/m16,sreg,imm16] src[r/m16,sreg,imm16]
		0x11	movw	dest[r/m8,r/m16,sreg,imm16] src[r/m8,r/m16,sreg,imm16] ※1

		第一オペランドに第二オペランドの値を格納します。
		※1	双方のオペランドが[r/m8]の場合を除く

		dest ← src

		変更されるフラグ
		(なし)

	XCHG
		0x13	xchg	x[r/m16], y[r/m16]

		第一オペランドと第二オペランドの値を交換します。

		tmp ← x
		x ← y
		y ← x

		変更されるフラグ
		(なし)

	INC
		0x20	incb	x[r/m8]
		0x21	incw	x[r/m16,sreg]

		オペランドの値をインクリメントします。

		x ← x+1
		setflagreg(x, OF+SF+ZF+PF)
		
		変更されるフラグ
		OF, SF, ZF, PF...結果に応じてセットされます

	DEC
		0x22	decb	x[r/m8]
		0x23	decw	x[r/m16,sreg]

		オペランドの値をデクリメントします。

		x ← x-1
		setflagreg(x, OF+SF+ZF+PF)
		
		変更されるフラグ
		OF, SF, ZF, PF...結果に応じてセットされます
	
	ADD
		0x24	addb	dest[r/m8], src[r/m8,imm8]
		0x25	addw	dest[r/m16,sreg], src[r/m16,sreg,imm16]

		第一オペランドに第二オペランドを加算し、第一オペランドに格納します。

		dest ← dest+src

		変更されるフラグ
		OF, SF, ZF, AF, PF, CF...結果に応じてセットされます

	SUB
		0x26	subb	dest[r/m8], src[r/m8,imm8]
		0x27	subw	dest[r/m16,sreg], src[r/m16,sreg,imm16]

		第一オペランドに第二オペランドを減算し、第一オペランドに格納します。

		dest ← dest-src

		変更されるフラグ
		OF, SF, ZF, AF, PF, CF...結果に応じてセットされます

	MUL
		0x28	mulb	x[r/m8]
		0x29	mulw	x[r/m16]

		オペランドとAX（オペランドのサイズがBYTEの場合はAL）を乗算し、DX:AX（オペランドのサイズがBYTEの場合はAX）に格納します。

		if operand_size==BYTE
		then(
			AX ← x * AL
		)else(
			tmp1 ← x * AX
			tmp2 ← tmp1 & $FFFF0000
			DX ← tmp2 <<< 16
			AX ← tmp1 & &0000FFFF
		)

		変更されるフラグ
		(なし)

	DIV		b,w
	CMP		b,w
	IN		w
	OUT		w
	PUSH	w
	POP		w
	HLT
	CALL	w
	RET
	CALLF	w
	RETF
	DBG
	JMP		w
	JO		w
	JE		w
	JNE		w