
    /* AS 16BIT EMULATOR    Launcher */

    #cmpopt varname 1

    #packopt name "emulator"
    #packopt version "version.txt"

    #define true 1
    #define false 0
    #define none -1

   ; #define DEF_FORCESTACKTRACE

    #enum KEY_ENTER     = 13
    #enum KEY_ESC       = 27
    #enum KEY_F1        = 112
    #enum KEY_F2
    #enum KEY_F3
    #enum KEY_F4
    #enum KEY_F5
    #enum KEY_F6
    #enum KEY_F7
    #enum KEY_F8
    #enum KEY_F9
    #enum KEY_F10
    #enum KEY_F11
    #enum KEY_F12
    #enum KEY_BS        = 8
    #enum KEY_TAB
    #enum KEY_SHIFT     = 16
    #enum KEY_CTRL
    #enum KEY_ALT
    #enum KEY_PAUSE
    #enum KEY_SPACE     = 32
    #enum KEY_PGUP
    #enum KEY_PGDN
    #enum KEY_END
    #enum KEY_HOME
    #enum KEY_ALLOWL
    #enum KEY_ALLOWU
    #enum KEY_ALLOWR
    #enum KEY_ALLOWD
    #enum KEY_INSERT    = 45
    #enum KEY_DEL

    #define CLR_BLACK           0, 0, 0
    #define CLR_BLUE            0, 0, 192
    #define CLR_GREEN           0, 192, 0
    #define CLR_CYAN            0, 192, 192
    #define CLR_RED             192, 0, 0
    #define CLR_MAGENTA         192, 0, 192
    #define CLR_BROWN           192, 64, 64
    #define CLR_LIGHT_GRAY      192, 192, 192
    #define CLR_DARK_GRAY       64, 64, 64
    #define CLR_LIGHT_BLUE      0, 0, 255
    #define CLR_LIGHT_GREEN     0, 255, 0
    #define CLR_LIGHT_CYAN      0, 255, 255
    #define CLR_LIGHT_RED       255, 0, 0
    #define CLR_LIGHT_MAGENTA   255, 0, 255
    #define CLR_YELLOW          192, 192, 0
    #define CLR_WHITE           255, 255, 255

    #module

        #deffunc initscr
            clrobj 0, -1
            pos 0, 0
            color 0, 0, 0 : boxf
            color 192, 192, 192
        return

        #deffunc softinitscr
            pos 0, 0
            color 0, 0, 0 : boxf
            color 192, 192, 192
        return

        // notx
        // 引数：   int notxIn=notxする値
        // 戻り値： int =notxされた値
        #defcfunc notx int notxIn
        return  notxIn xor -1
    
        // 符号なし右方向ビットシフト
        // 引数：   int p01=ビットシフトを行う値
        // ＝＝：   int p02=シフトする回数
        // 影響：なし
        // 戻り値： int _p01=ビットシフトされた値
        #defcfunc RBS int p01, int p02
            if ( p02 > 0 ) {
                _p01 = p01 >> p02
                if ( p01 & 0x80000000) {
                    _p01_2 = 0x80000000 >> ( p02 - 1 )
                    _p01 ^= _p01_2
                }
            }
            else : _p01 = p01
        return _p01

    #global

    #include "cfg.as"
    #include "hspda.as"
    #include "kernel32.as"
    #include "msglib.as"
    #include "stacktrace.hsp"

    #uselib "user32.dll"
    #func SetTimer  "SetTimer"  int, int, int, int
    #func KillTimer "KillTimer" int, int
    #define WM_TIMER        0x0113

    #define StartAddr   0
    #define EndAddr     1
    #define SizeAddr    2

    CPU_CLOCK_CYCLE = 256
    CPU_CLOCK_WAIT = 1
    DISPLAY_REFRESH_TIME = 5
    CPU_PIN_REFRESH = 2

    #enum SCREEN_DEBUGLOG_ID = 0
    #enum SCREEN_DISPLAY_ID
    #enum SCREEN_CONTROL_ID
    #enum SCREEN_MONITOR_ID
    #enum SCREEN_CONFIG_ID
    #enum SCREEN_SIZE_X = 640
    #enum SCREEN_SIZE_Y = 480


    #module

        #uselib "kernel32.dll"
        #cfunc GetTickCount "GetTickCount"

        #enum global SCRhide = -1
        #enum global SCRnone = 0
        #enum global SCRactive = 1

        #deffunc winselinit
            dim windowstat, 256
        return

        #deffunc winsel int winsel_winID, int winsel_prm
            gsel winsel_winID, winsel_prm
            windowstat.winsel_winID = winsel_prm
        return

        #defcfunc getwinstat int getwinstat_winID
            switch windowstat.getwinstat_winID
                case 1
                return 1
                case -1
                return 0
            swend
        return -1

        #deffunc settick int tickID
            SetTick_int.tickID = GetTickCount()
        return

        #defcfunc gettick int tickID
        return GetTickCount() - SetTick_int.tickID

        #define useCustomFont 1

        #uselib "gdi32.dll"
        #func AddFontResourceA "AddFontResourceA" var
        #func RemoveFontResourceA "RemoveFontResourceA" var

        #define QFR_DESCRIPTION 1
        #define QFR_LOGFONT 2

        #deffunc setupFont
            sdim Var_Temp_StrArray, , 8
            sdim Var_ApplyFontsLists
            Var_ApplyFontsLists_index = 0
        return
    
        #deffunc addFont str fontFileName
            if ( useCustomFont ) : {
                Var_Temp_StrArray = ""+ dir_cur +"\\"+ fontfilename +""
                exist Var_Temp_StrArray
                if ( strsize != -1 ) : {
                    AddFontResourceA Var_Temp_StrArray
                    Var_ApplyFontsLists.Var_ApplyFontsLists_index = Var_Temp_StrArray
                    Var_ApplyFontsLists_index ++
                }
            }
        return
    
        #deffunc removeFont onexit
            if ( useCustomFont ) : {
                foreach Var_ApplyFontsLists
                    RemoveFontResourceA Var_ApplyFontsLists.cnt
                loop
            }
        return
    
        #deffunc removeFontSelf
            if ( useCustomFont ) : {
                foreach Var_ApplyFontsLists
                    RemoveFontResourceA Var_ApplyFontsLists.cnt
                loop
            }
        return

    #global

    logmes strf("%x",__hspver__)

    vint_isEnableStacktrace = false
    vstr_configFileName = "emu_conf.ascfg"

    if ( dir_cmdline != "" ) {

        sdim vstr_temp_array
        vstr_temp = dir_cmdline
        splitEx vstr_temp, vstr_temp_array, ' '

        foreach vstr_temp_array

            if ( ( vstr_temp_array.cnt == "--enablestacktrace" ) or ( vstr_temp_array.cnt == "-s" ) ) {

                vint_isEnableStacktrace = true

            }

        loop

    }

    #ifdef  DEF_FORCESTACKTRACE

        vint_isEnableStacktrace = true

    #endif

    winselinit


    init_msglib SCREEN_DEBUGLOG_ID, 0, 0, SCREEN_SIZE_X, SCREEN_SIZE_Y
    screen SCREEN_DISPLAY_ID, SCREEN_SIZE_X, SCREEN_SIZE_Y, 4 +1
    screen SCREEN_CONTROL_ID, SCREEN_SIZE_Y /2, SCREEN_SIZE_X/2, 8+4
    screen SCREEN_MONITOR_ID, SCREEN_SIZE_X, SCREEN_SIZE_Y, 8+4
    screen SCREEN_CONFIG_ID, SCREEN_SIZE_X, SCREEN_SIZE_Y, 8+4

    vint_conf_RefreshRate = 1

    vint_conf_DebugRegFormat_AX = 0
    vint_conf_DebugRegFormat_BX = 0
    vint_conf_DebugRegFormat_CX = 0
    vint_conf_DebugRegFormat_DX = 0

    vint_conf_DebugRegFormat_SI = 0
    vint_conf_DebugRegFormat_DI = 0
    vint_conf_DebugRegFormat_BP = 0
    vint_conf_DebugRegFormat_SP = 0

    vint_conf_DebugRegFormat_CS = 0
    vint_conf_DebugRegFormat_DS = 0
    vint_conf_DebugRegFormat_ES = 0
    vint_conf_DebugRegFormat_SS = 0

    vint_conf_DebugRegFormat_IP = 0



    winsel SCREEN_DEBUGLOG_ID, SCRnone
    title "debug"

    winsel SCREEN_DISPLAY_ID, SCRnone
    title "screen"
    initscr
    font msgothic, 16

    winsel SCREEN_MONITOR_ID, SCRhide
    title "monitor"
    
    pos 640 -64, 480 -24
    button gosub "Close", *l_control_monitor_close

    winsel SCREEN_CONFIG_ID, SCRhide
    title "config"

    pos 0, 0
    mes "Please wait..."

    winsel SCREEN_CONTROL_ID, SCRnone
    title "Controler"

    objsize SCREEN_SIZE_Y /2, 32, 0
    button gosub "RESET", *l_control_RESET
    button gosub "DUMP", *l_control_dump
    button goto  "DEBUG", *l_control_debug
    button gosub "MONITOR", *l_control_monitor
    button gosub "CONFIG", *l_control_config
    
    button gosub "CLEAR LOG", *l_control_clearLog
    button gosub "TOGGLE TRACE", *l_control_tglTrace
    button gosub "CLEAR TRACE", *l_control_clearTrace
    




    winsel SCREEN_DISPLAY_ID, SCRnone 
    pos 0, 460 : mes "Use the remote controller to operate the v.m.."
    pos 0, 0
    mes "Emulator compile date:"+ __date__ +" "+ __time__ +""
    mes "Press [F12] to setup"
    mes "Booting emulator..."

    // font setup

    chdir "Resources"
	dirlist vstr_temp, "*.FON", 1
	notesel vstr_temp

	setupFont

	repeat notemax

		noteget vstr_temp.1, cnt
		exist vstr_temp.1
		if ( strsize != none ) : {
			
			addfont vstr_temp.1
			putmes_msglib "Loaded font file: \""+ getpath( vstr_temp.1, 8 ) +"\"\n", SCREEN_DEBUGLOG_ID

		}

	loop

	chdir "..\\"
	noteunsel

    putmes_msglib "Applied fonts\n", SCREEN_DEBUGLOG_ID

    cfgAS_init vstr_configFileName

    vstr_ProcessorName = "(none)"
    vstr_ProcessorArchName = "(none)"
    vstr_ProcessorVendor = "(none)"
    vint_VRAM_Format = 1
    vstr_FontName = "Bm437 IBM VGA 8x16"
    
    cfgAS_read "Processor.Name", vstr_ProcessorName
    cfgAS_read "Processor.ArchName", vstr_ProcessorArchName
    cfgAS_read "Processor.Vendor", vstr_ProcessorVendor

    cfgAS_read "Processor.ClockCycle", CPU_CLOCK_CYCLE
    cfgAS_read "Processor.ClockPause", CPU_CLOCK_WAIT
    cfgAS_read "Processor.RefreshTime", CPU_PIN_REFRESH
    cfgAS_read "Graphic.RefreshTime", DISPLAY_REFRESH_TIME

    color CLR_WHITE
    
    cfgAS_read "BIOS.MemoryTable.StartAddr.MainCodeArea", vint_Ram_BIOS_MainCode.StartAddr
    cfgAS_read "BIOS.MemoryTable.EndAddr.MainCodeArea"  , vint_Ram_BIOS_MainCode.EndAddr
    vint_Ram_BIOS_MainCode.SizeAddr = vint_Ram_BIOS_MainCode.EndAddr - vint_Ram_BIOS_MainCode.StartAddr +1
    cfgAS_read "BIOS.MemoryTable.StartAddr.SubCodeArea", vint_Ram_BIOS_SubCode.StartAddr
    cfgAS_read "BIOS.MemoryTable.EndAddr.SubCodeArea"  , vint_Ram_BIOS_SubCode.EndAddr
    vint_Ram_BIOS_SubCode.SizeAddr = vint_Ram_BIOS_SubCode.EndAddr - vint_Ram_BIOS_SubCode.StartAddr +1

    cfgAS_read "Graphic.Format", vint_VRAM_Format
    cfgAS_read "Graphic.Font", vstr_FontName

    vint_isEnablePutTrace_CALL   = true
    vint_isEnablePutTrace_JUMP   = true
    vint_isEnablePutTrace_RET    = true
    vint_isEnablePutTrace_CHANGE = true

    vint_isEnablePutTraceError_UD2 = true

    vint_isEnablePutTrace_HardwareInterrupt = true

    cfgAS_read "StackTrace.putTrace.CALL", vint_isEnablePutTrace_CALL
    cfgAS_read "StackTrace.putTrace.JUMP", vint_isEnablePutTrace_JUMP
    cfgAS_read "StackTrace.putTrace.RET", vint_isEnablePutTrace_RET
    cfgAS_read "StackTrace.putTrace.CHANGE", vint_isEnablePutTrace_CHANGE

    cfgAS_read "StackTrace.putTrace.#UD2", vint_isEnablePutTraceError_UD2

    cfgAS_read "StackTrace.putTrace.HardwareInterrupt", vint_isEnablePutTrace_HardwareInterrupt

    winsel SCREEN_CONFIG_ID, SCRnone

    color 255, 255, 255 : boxf : color : pos 0, 0

    objsize 128, 20, 0
    mes "Monitor"
    mes "-RefreshRate", 1
    combox vint_conf_RefreshRate, 0, "RealTime\n2 Cycles\n4 Cycles\n8 Cycles\n16 Cycles\n32 Cycles" : pos 0, ginfo_cy

    mes "System/CPU"
    mes "-ClockCycle", 1
    input CPU_CLOCK_CYCLE, 128, 20, 8 : pos 0, ginfo_cy
    mes "-ClockPause", 1
    input CPU_CLOCK_WAIT, 128, 20, 8 : pos 0, ginfo_cy
    mes "-RefreshTime", 1
    input CPU_PIN_REFRESH, 128, 20, 8 : pos 0, ginfo_cy

    mes "System/Graphic"
    mes "-RefreshTime", 1
    input DISPLAY_REFRESH_TIME, 128, 20, 8 : pos 0, ginfo_cy

    pos 640 -64, 480 -24
    objsize
    button gosub "Close", *l_control_config_close

    winsel SCREEN_DISPLAY_ID, SCRnone
    font vstr_FontName, 16
    mref emu_vbin_VRAM, 66

    vstr_BIOSpath = "bios.bin"
    cfgAS_read "BIOS.binaryPath", vstr_BIOSpath

    exist vstr_BIOSpath
    if ( strsize == -1 ) : {

        mes "BIOS program data is not found!"
        stop
        
    }

    sdim vbin_BIOS, strsize
    bload vstr_BIOSpath, vbin_BIOS, strsize

    onkey gosub *l_bootKeyPush
    onexit *l_exit

    mes "Ready..."
    wait 300
    


*l_emuEntry

    winsel SCREEN_DISPLAY_ID, SCRnone
    initscr

    vint_CPU_Timer_isActive = false
    sdim emu_vbin_Memory, 1048576
    memcpy emu_vbin_Memory, vbin_BIOS, varsize(vbin_BIOS), vint_Ram_BIOS_MainCode.StartAddr
    sdim emu_vbin_IO, 0xFFFF
    emu_vbin_PIN = 0
    emu_vbin_needReboot = false
    sdim vstr_DisplayString, 4800
    initiation_stack
    if ( vint_isEnableStacktrace ) : setTrace true

    emu_vbin_Memory_Index = vint_Ram_BIOS_MainCode.StartAddr

    goto *l_CPUentry

    stop

*l_bootKeyPush

    if ( wparam == 123 ) {

        color 0, 0, 192 : boxf
        color 192, 192, 192 : boxf 5, 5, 640-5, 480-5
        color 0, 0, 192 : boxf 10, 30, 640-10, 480-30
        pos 10, 10 : mes "AkidukiSystems 16bit Emulator Setup Utility"
        pos 10, 480-25 : mes "Copyright (c) 2022-2023 AkidukiSystems CC BY-SA 4.0"

        color 192, 192, 192
        pos 15, 40
        mes "Emulator"
        mes " -Version: 0.11 Debug"
        mes " -BIOS binary file: \""+ vstr_BIOSpath +"\""
        mes "\nProcessor"
        mes " -Name: "+ vstr_ProcessorName
        mes " -Vendor: "+ vstr_ProcessorVendor
        mes " -Speed: 2600 I/s (MAX)"
        mes " -Architecture: "+ vstr_ProcessorArchName

        stop

    }


    return

*l_CPUentry

    #addition "cpu.hsp"

    stop

*l_exit

    if ( vint_CPU_Timer_isActive ) : KillTimer hwnd, 1

    end
    
*l_control_RESET

    emu_vbin_PIN = 1

    return

*l_control_dump

    vsave "dump_all.bin"
    bsave "dump_mem.bin", emu_vbin_Memory
    vsave_start
    vsave_put vbin_CPUregisterG
    vsave_put vbin_CPUregisterS
    vsave_put vbin_CPUregisterE
    vsave_end "dump_res.bin"

    vstr_temp = putstacltrace()
    if ( vstr_temp == "" ) : return
    bsave "stacktrace.txt", vstr_temp, strlen(vstr_temp)

    return

*l_control_debug

    vload "dump_all.bin"

    vbin_CPUtmp.0 = fetchRegisterWe(rFL)

        vbin_CPUtmpS.0 = ""
        repeat 16
            
            switch cnt
            case 0
                if ( vbin_CPUtmp && fCF ) : vbin_CPUtmpS.0 += "C" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 2
                if ( vbin_CPUtmp && fPF ) : vbin_CPUtmpS.0 += "P" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 4
                if ( vbin_CPUtmp && fAF ) : vbin_CPUtmpS.0 += "A" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 6
                if ( vbin_CPUtmp && fZF ) : vbin_CPUtmpS.0 += "Z" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 7
                if ( vbin_CPUtmp && fSF ) : vbin_CPUtmpS.0 += "S" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 8
                if ( vbin_CPUtmp && fTF ) : vbin_CPUtmpS.0 += "T" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 9
                if ( vbin_CPUtmp && fIF ) : vbin_CPUtmpS.0 += "I" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 10
                if ( vbin_CPUtmp && fDF ) : vbin_CPUtmpS.0 += "D" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            case 11
                if ( vbin_CPUtmp && fOF ) : vbin_CPUtmpS.0 += "O" : else : vbin_CPUtmpS.0 += "-"
            swbreak
            swend

        loop

        putmes_msglib "AX="+ strf("%04X", fetchRegisterWg(rAX)) +" BX="+ strf("%04X", fetchRegisterWg(rBX)) +" CX="+ strf("%04X", fetchRegisterWg(rCX)) +" DX="+ strf("%04X", fetchRegisterWg(rDX)) +" SI="+ strf("%04X", fetchRegisterWg(rSI)) +" DI="+ strf("%04X", fetchRegisterWg(rDI)) +" BP="+ strf("%04X", fetchRegisterWg(rBP)) +" SP="+ strf("%04X", fetchRegisterWg(rSP)) +"\n", SCREEN_DEBUGLOG_ID
        putmes_msglib "CS="+ strf("%04X", fetchRegisterWs(rCS)) +" DS="+ strf("%04X", fetchRegisterWs(rDS)) +" ES="+ strf("%04X", fetchRegisterWs(rES)) +" SS="+ strf("%04X", fetchRegisterWs(rSS)) +" IP="+ strf("%04X", fetchRegisterWe(rIP)) +" "+ vbin_CPUtmpS.0 +"\n", SCREEN_DEBUGLOG_ID
        putmes_msglib "TIME="+ gettick(0) +" ms\n", SCREEN_DEBUGLOG_ID
        putmes_msglib "TICK="+ emu_vint_executedCmd +"\n\n", SCREEN_DEBUGLOG_ID

    stop

*l_control_clearLog

    cls_msglib SCREEN_DEBUGLOG_ID

    return

*l_control_tglTrace

    if ( check_isEnableTrace() ) {

        setTrace false

    } else {

        setTrace true

    }

    return

*l_control_clearTrace

    clearTrace

    return

*l_control_monitor

    winsel SCREEN_MONITOR_ID, SCRactive

    return

*l_control_monitor_close

    winsel SCREEN_MONITOR_ID, SCRhide

    return

*l_control_config

    winsel SCREEN_CONFIG_ID, SCRactive

    return

*l_control_config_close

    winsel SCREEN_CONFIG_ID, SCRhide

    return

*l_refreshReg

    if ( getwinstat( SCREEN_MONITOR_ID ) == 0 ) : return

    winsel SCREEN_MONITOR_ID, SCRnone

    vbin_CPUtmp.0 = fetchRegisterWe(rFL)

    vbin_CPUtmpS.0 = ""
    repeat 16
        
        switch cnt
        case 0
            if ( vbin_CPUtmp && fCF ) : vbin_CPUtmpS.0 += "C" : else : vbin_CPUtmpS.0 += "-"
        swbreak
        case 2
            if ( vbin_CPUtmp && fPF ) : vbin_CPUtmpS.0 += "P" : else : vbin_CPUtmpS.0 += "-"
        swbreak
        case 4
            if ( vbin_CPUtmp && fAF ) : vbin_CPUtmpS.0 += "A" : else : vbin_CPUtmpS.0 += "-"
        swbreak
        case 6
            if ( vbin_CPUtmp && fZF ) : vbin_CPUtmpS.0 += "Z" : else : vbin_CPUtmpS.0 += "-"
        swbreak
        case 7
            if ( vbin_CPUtmp && fSF ) : vbin_CPUtmpS.0 += "S" : else : vbin_CPUtmpS.0 += "-"
        swbreak
        case 8
            if ( vbin_CPUtmp && fTF ) : vbin_CPUtmpS.0 += "T" : else : vbin_CPUtmpS.0 += "-"
        swbreak
        case 9
            if ( vbin_CPUtmp && fIF ) : vbin_CPUtmpS.0 += "I" : else : vbin_CPUtmpS.0 += "-"
        swbreak
        case 10
            if ( vbin_CPUtmp && fDF ) : vbin_CPUtmpS.0 += "D" : else : vbin_CPUtmpS.0 += "-"
        swbreak
        case 11
            if ( vbin_CPUtmp && fOF ) : vbin_CPUtmpS.0 += "O" : else : vbin_CPUtmpS.0 += "-"
        swbreak
        swend

    loop

    redraw 0

    color 255, 255, 255 : boxf : color
    pos 0, 0

    mes "System monitor"
    mes "-Register value"

    pos 0, 40
    mes "AX "+ strf( "%04X", fetchRegisterWg(rAX) )
    mes "SI "+ strf( "%04X", fetchRegisterWg(rSI) )
    mes "CS "+ strf( "%04X", fetchRegisterWs(rCS) )
    mes "IP "+ strf( "%04X", fetchRegisterWe(rIP) )

    pos 128, 40
    mes "BX "+ strf( "%04X", fetchRegisterWg(rBX) )
    mes "DI "+ strf( "%04X", fetchRegisterWg(rDI) )
    mes "DS "+ strf( "%04X", fetchRegisterWs(rDS) )
    mes "FLAGS "+ vbin_CPUtmpS.0

    pos 256, 40
    mes "CX "+ strf( "%04X", fetchRegisterWg(rCX) )
    mes "BP "+ strf( "%04X", fetchRegisterWg(rBP) )
    mes "ES "+ strf( "%04X", fetchRegisterWs(rES) )

    pos 384, 40
    mes "DX "+ strf( "%04X", fetchRegisterWg(rDX) )
    mes "SP "+ strf( "%04X", fetchRegisterWg(rSP) )
    mes "SS "+ strf( "%04X", fetchRegisterWs(rSS) )

    pos 0, 120
    mes "TIME(ms) "+ gettick(0)
    mes "TICK "+ emu_vint_executedCmd

    redraw 1

    return

*OnTimer_RTC

    return