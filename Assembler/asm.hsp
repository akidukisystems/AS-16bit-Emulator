
    #packopt name "asm"
    #packopt version "asmver.txt"

    sysfont 11
    #module

    // convert hex to dec
    #defcfunc intdh str intdh_p1

        vstr_temp.0 = intdh_p1
    
        if ( instr( vstr_temp.0, 0, "0x" ) == 0 ) {

            return int( "$"+ strmid( vstr_temp.0, 2, strlen( vstr_temp.0 ) -2 ) )

        }
        if ( instr( vstr_temp.0, 0, "h" ) == strlen( vstr_temp.0 ) -1 ) {

            return int( "$"+ strmid( vstr_temp.0, 0, strlen( vstr_temp.0 ) -1 ) )

        }

    return int ( intdh_p1 )

    #defcfunc num2ascii str n2a

        sdim dat
        v = strf( "%02d", n2a )

        repeat 2

            poke tmp, 0, peek( v, cnt )

            tmp.1 = tmp & $00F0
            tmp.1 /= $10
            tmp.2 = tmp & $000F


            if ( cnt == 0 ) {

                poke dat, 2, tmp.1 + $30
                poke dat, 3, tmp.2 + $30

            }

            if ( cnt == 1) {

                poke dat, 0, tmp.1 + $30
                poke dat, 1, tmp.2 + $30

            }

        loop

    return str( int( "$"+ dat ) )

    #global

    #include "as.header.as"
    #include "cfg.as"
    #include "..\\msglib.as"

    init_msglib 0, 0, 0

    title "Assembler"

    #enum SIZE_NONE = 1
    #enum SIZE_WORD
    #enum SIZE_BYTE

    #enum PRM_NULL = 0
    #enum PRM_RESISTOR
    #enum PRM_MEMORY
    #enum PRM_POINTER
    #enum PRM_VALUE

    #define WAITMS      1
    #define WAITCNT     100

    vstr_cfg_ArchName = ""

    cfgAS_init "asm_conf.ascfg"
    cfgAS_read "Assembler.ArchName", vstr_cfg_ArchName
    vstr_inputfileName = ""

    pos 0, 480-24 : objsize 128, 24, 0
    button goto "Open...", *l_oaa
    pos 128, 480-24 : button goto "Assemble", *l_run

    putmes_msglib "Architecture: "+ vstr_cfg_ArchName +"\n"
    putmes_msglib "Ready...\n"

    vint_cmdmode = 0

    if ( dir_cmdline != "" ) {

        vstr_inputfileName = dir_cmdline
        vint_cmdmode = 1
        putmes_msglib "Loaded ASM file. (\""+ vstr_inputfileName +"\")\n"


        goto *l_run

    }

    stop

*l_oaa

    dialog "asm|*", 16, "Assembly file|All"
    if ( stat ) {

        vstr_inputfileName = refstr
        putmes_msglib "Loaded ASM file. (\""+ refstr +"\")\n"

    }

    stop

*l_run

    // initiation

    vstr_inputfileData = ""
    vstr_loadline = ""
    vstr_fixedData = ""

    vstr_resistorWordTable      = "AX", "BX", "CX", "DX", "SI", "DI", "BP", "SP", "CS", "DS", "ES", "SS", "IP", "FL"
    vstr_resistorByteHighTable  = "AH", "BH", "CH", "DH"
    vstr_resistorByteLowTable   = "AL", "BL", "CL", "DL"

    vtable_com_wordTable = ""
    #addition "arch\\com\\wordtable.hsp"

    vtable_com_byteTable = ""
    #addition "arch\\com\\bytetable.hsp"

    vtable_com_noneTable = ""
    #addition "arch\\com\\nonetable.hsp"

    vtable_res_WordTable = ""
    #addition "arch\\res\\word.hsp"

    vtable_res_ByteHighTable = ""
    #addition "arch\\res\\byteh.hsp"

    vtable_res_ByteLowTable = ""
    #addition "arch\\res\\bytel.hsp"

    vtable_com_transform = ""
    #addition "arch\\com\\transform.hsp"

    sdim vstr_debugtxt

    notesel vstr_inputfileData
    exist vstr_inputfileName
    if ( strsize == -1 ) : stop
    noteload vstr_inputfileName

    putmes_msglib "Assembler: Cleaning Code...\n"

    // code cleaning
    repeat notemax

        noteget vstr_loadline, cnt
        vint_noteindex = cnt

        // delete indent

        repeat

            if ( ( instr( vstr_loadline, 0, " " ) == 0 ) or ( instr( vstr_loadline, 0, "\t" ) == 0 ) ) {

                vstr_loadline = strmid( vstr_loadline, 1, strlen(vstr_loadline) )
                
            } else {

                break
                
            }

        loop

        // next line

        if ( vstr_loadline == "" ) {
            
            continue cnt+1

        }


        sdim vstr_code, 64, 32
        vint_codeindex = 0
        vint_DoNotSplitFlag = 0

        // convert fixed string

        repeat

            vstr_getstr = strmid( vstr_loadline, 0, 1 )                         ; this char
            vstr_loadline = strmid( vstr_loadline, 1, strlen(vstr_loadline)-1 ) ; unconverted chars

            // if "string", then do not convert
            if ( vstr_getstr == "\"" ) {

                if ( vint_DoNotSplitFlag ) {
                
                    vint_DoNotSplitFlag = 0

                } else {

                    vint_DoNotSplitFlag = 1

                }

            }

            // if got char isnt split char, then put char, else change chars pointer
            if ( ( vstr_getstr != " " ) and ( vstr_getstr != "\t" ) and ( vstr_getstr != "," ) ) {

                vstr_code.vint_codeindex += vstr_getstr

            } else {

                if ( vstr_code.vint_codeindex == "" ) : continue cnt+1  ; if finish this string convert, then go to next string
                if ( vint_DoNotSplitFlag == 1 ) {                       ; if "string", then its ignore
                    
                    vstr_code.vint_codeindex += vstr_getstr

                } else {

                    // next chars pointer
                    vstr_fixedData += ","+ vstr_code.vint_codeindex +""
                    vint_codeindex ++

                }

            }

            // if finished, then go to next line
            if ( strlen(vstr_loadline) == 0 ) { 
                
                if ( vstr_code.vint_codeindex == "" ) {
                    
                    vstr_fixedData += "\n"
                    break

                }

                vstr_fixedData += ","+ vstr_code.vint_codeindex +"\n"
                break

            }

        loop

        if ( cnt \ WAITCNT ) : await WAITMS

    loop



    // PreProcess

    sdim vstr_code, 64, 8
    vint_codeindex = 0

    sdim vtable_enum, 64, 2, 256
    vint_enumIndex = 0

    sdim vtable_label, 64, 2, 256
    vint_labelIndex = 0

    sdim vbin_assembledData, 512
    vint_assembledDataNextIndex = 0

    vint_originaddr = 0
    vint_originaddr_tmp = 0

    vint_isAutoSize = 0

    vstr_filename = ""

    notesel vstr_fixedData

    putmes_msglib "Assembler: Preprocessing...\n"

    repeat notemax

        noteget vstr_loadline, cnt

        sdim vstr_code, 64, 8
        split vstr_loadline, ",", vstr_code

        if ( instr( vstr_code.1, 0, "#" ) == 0 ) {

            switch vstr_code.1
            case "#config"
            
                if ( vstr_code.2 == "codesize" ) {

                    if ( vstr_code.3 == "auto" ) {

                        sdim vbin_assembledData, 65535
                        vint_isAutoSize = 1

                    } else {

                        sdim vbin_assembledData, intdh( vstr_code.3 )
                        putmes_msglib "Assembler: Codesize:"+ intdh( vstr_code.3 ) +" Bytes\n"

                    }

                }

                if ( vstr_code.2 == "filename" ) {

                    vstr_filename = strtrim( vstr_code.3, 0, '"' )
                    putmes_msglib "Assembler: filename:\""+ vstr_filename +"\"\n"

                }

            swbreak
            case "#enum"

                if ( instr( vstr_code.2, 0, "@_date" ) == 0 ) {

                    if ( vstr_code.2 == "@_date.yy_upper" ) {

                        vtable_enum.0.vint_enumIndex = vstr_code.2
                        vi_tmp = gettime( 0 ) \ 100
                        vtable_enum.1.vint_enumIndex = str( gettime( 0 ) - vi_tmp )
                        vtable_enum.1.vint_enumIndex = num2ascii( str( int( vtable_enum.1.vint_enumIndex ) / 100 ) )

                        putmes_msglib "Assembler: Defined value. (Name:"+ vstr_code.2 +" Value:"+ strf( "%04Xh", vtable_enum.1.vint_enumIndex  ) +")\n"

                        vint_enumIndex ++

                        swbreak

                    }

                    if ( vstr_code.2 == "@_date.yy_lower" ) {

                        vtable_enum.0.vint_enumIndex = vstr_code.2
                        vtable_enum.1.vint_enumIndex = num2ascii( str( gettime(0) \ 100 ) )

                        putmes_msglib "Assembler: Defined value. (Name:"+ vstr_code.2 +" Value:"+ strf( "%04Xh", vtable_enum.1.vint_enumIndex  ) +")\n"

                        vint_enumIndex ++

                        swbreak

                    }

                    if ( vstr_code.2 == "@_date.MM" ) {

                        vtable_enum.0.vint_enumIndex = vstr_code.2
                        vtable_enum.1.vint_enumIndex = num2ascii( str( gettime(1) ) )

                        putmes_msglib "Assembler: Defined value. (Name:"+ vstr_code.2 +" Value:"+ strf( "%04Xh", vtable_enum.1.vint_enumIndex  ) +")\n"

                        vint_enumIndex ++

                        swbreak

                    }

                    if ( vstr_code.2 == "@_date.dd" ) {

                        vtable_enum.0.vint_enumIndex = vstr_code.2
                        vtable_enum.1.vint_enumIndex = num2ascii( str( gettime(3) ) )

                        putmes_msglib "Assembler: Defined value. (Name:"+ vstr_code.2 +" Value:"+ strf( "%04Xh", vtable_enum.1.vint_enumIndex  ) +")\n"

                        vint_enumIndex ++

                        swbreak

                    }

                }

                if ( instr( vstr_code.2, 0, "@_time" ) == 0 ) {

                    if ( vstr_code.2 == "@_time.hh" ) {

                        vtable_enum.0.vint_enumIndex = vstr_code.2
                        vtable_enum.1.vint_enumIndex = num2ascii( str( gettime(4) ) )

                        putmes_msglib "Assembler: Defined value. (Name:"+ vstr_code.2 +" Value:"+ strf( "%04Xh", vtable_enum.1.vint_enumIndex  ) +")\n"

                        vint_enumIndex ++

                        swbreak

                    }

                    if ( vstr_code.2 == "@_time.mm" ) {

                        vtable_enum.0.vint_enumIndex = vstr_code.2
                        vtable_enum.1.vint_enumIndex = num2ascii( str( gettime(5) ) )

                        putmes_msglib "Assembler: Defined value. (Name:"+ vstr_code.2 +" Value:"+ strf( "%04Xh", vtable_enum.1.vint_enumIndex  ) +")\n"

                        vint_enumIndex ++

                        swbreak

                    }

                    if ( vstr_code.2 == "@_time.ss" ) {

                        vtable_enum.0.vint_enumIndex = vstr_code.2
                        vtable_enum.1.vint_enumIndex = num2ascii( str( gettime(6) ) )

                        putmes_msglib "Assembler: Defined value. (Name:"+ vstr_code.2 +" Value:"+ strf( "%04Xh", vtable_enum.1.vint_enumIndex  ) +")\n"

                        vint_enumIndex ++

                        swbreak

                    }

                }

                vtable_enum.0.vint_enumIndex = vstr_code.2
                vtable_enum.1.vint_enumIndex = str( intdh( vstr_code.3 ) )
                vint_enumIndex ++

                putmes_msglib "Assembler: Defined value. (Name:"+ vstr_code.2 +" Value:"+ strf( "%04Xh", intdh( vstr_code.3 ) ) +")\n"

            swbreak
            case "#origin"

                if ( vstr_code.2 == "addr" ) {

                    vint_originaddr = intdh( vstr_code.3 )

                }

            swbreak
            swend

        }

        if ( cnt \ WAITCNT ) : await WAITMS
        
    loop

    //1st

    

    notesel vstr_fixedData

    dim vtable_type, 4, notemax
    vint_currentaddress = 0

    sdim vtable_labeluse, 64, 2, 256
    vint_labeluseIndex = 0


    /*

        vtable_type.0 = 命令サイズ {
            int 0 = NULL
                1 = NONE
                2 = WORD
                3 = BYTE
        }

        vtable_type.1 = パラメータ1の種類 {
            int 0 = NULL
                1 = RESISTOR
                2 = MEMORY
                3 = POINTER
                4 = VALUE
        }

        vtable_type.2 = パラメータ2の種類 {
            int 0 = NULL
                1 = RESISTOR
                2 = MEMORY
                3 = POINTER
                4 = VALUE
        }

        vtable_type.3 = 命令のあるアドレス

    */
    
    putmes_msglib "Assembler: 1st passing...\n"

    repeat notemax

        vint_thisNoteIndex = cnt

        noteget vstr_loadline, cnt
        sdim vstr_code, 64, 8

        split vstr_loadline, ",", vstr_code

        // prepocessor command
        if ( instr( vstr_code.1, 0, "#" ) == 0  ) {

            if ( ( vstr_code.1 == "#origin" ) ) {

                if ( ( vstr_code.2 == "offset" ) ) {

                    vint_originaddr_tmp = vint_originaddr
                    vint_originaddr = intdh( vstr_code.3 ) 

                    if ( instr( vstr_code.3, 0, "-" ) == 0 ) : vint_originaddr *= -1

                }

                if ( ( vstr_code.2 == "end" ) ) {
                
                    vint_originaddr = vint_originaddr_tmp

                }

            }

            continue cnt+1

        }

        // internal command
        if ( ( instr( vstr_code.1, 0, "&" ) == 0 ) ) {

            if ( vstr_code.1 == "&RESB" ) {

                vint_currentaddress += intdh( vstr_code.2 )
                vint_assembledDataNextIndex += intdh( vstr_code.2 )
                
                continue cnt+1

            }

            if ( vstr_code.1 == "&RESBSF" ) {

                if ( ( intdh( vstr_code.2 ) - vint_currentaddress ) < 0 ) {
                
                    putmes_msglib ""+ strf( "%04Xh", vstr_code.2 ) +" is vaild value.\n"
                    stop

                }

                vint_currentaddress += intdh( vstr_code.2 ) - vint_currentaddress
                vint_assembledDataNextIndex += intdh( vstr_code.2 ) - vint_assembledDataNextIndex

                continue cnt+1

            }

            if ( vstr_code.1 == "&RESB0" ) {

                vint_currentaddress = (vint_currentaddress / 16 +1 )*16
                vint_assembledDataNextIndex = (vint_assembledDataNextIndex / 16 +1 )*16

                continue cnt+1

            }


            if ( vstr_code.1 == "&DB" ) {

                repeat -1, 2

                    if ( vstr_code.cnt == "" ) : break
                    if ( instr( vstr_code.cnt, 0, ";" ) == 0 ) : break

                    if ( instr( vstr_code.cnt, 0, "@" ) == 0 ) {

                        vint_temp = cnt

                        repeat length2( vtable_enum )

                            if ( vtable_enum.0.cnt == vstr_code.vint_temp ) {

                                if ( int( vtable_enum.1.cnt ) > 0xFF ) {

                                    putmes_msglib "Error: &DB invaild value.\n"
                                    stop

                                }

                                poke vbin_assembledData, vint_assembledDataNextIndex, int( vtable_enum.1.cnt )

                                vstr_debugtxt.vint_debugindex += strf( "%08X:", vint_originaddr )
                                vstr_debugtxt.vint_debugindex += strf( "%08X    ", vint_assembledDataNextIndex )
                                vstr_debugtxt.vint_debugindex += int( vtable_enum.1.cnt )
                                vint_debugindex ++

                                break

                            }

                        loop

                        vint_assembledDataNextIndex ++
                        vint_currentaddress ++
                        continue cnt+1

                    }

                    if ( instr( vstr_code.cnt, 0, "\"" ) == 0 ) {

                        poke vbin_assembledData, vint_assembledDataNextIndex, strtrim( vstr_code.cnt, 0, '\"' )
                        vstr_debugtxt.vint_debugindex += strf( "%08X:", vint_originaddr )
                        vstr_debugtxt.vint_debugindex += strf( "%08X    ", vint_assembledDataNextIndex )
                        vstr_debugtxt.vint_debugindex += strtrim( vstr_code.cnt, 0, '\"' )
                        vint_debugindex ++

                        vint_assembledDataNextIndex += strsize
                        vint_currentaddress += strsize
                        continue cnt+1

                    } else {

                        vint_temp = intdh( vstr_code.cnt )

                        if ( vint_temp > 0xFF ) {

                            putmes_msglib "Error: &DB invaild value.\n"
                            stop

                        }

                        poke vbin_assembledData, vint_assembledDataNextIndex, vint_temp

                        vstr_debugtxt.vint_debugindex += strf( "%08X:", vint_originaddr )
                        vstr_debugtxt.vint_debugindex += strf( "%08X    ", vint_assembledDataNextIndex )
                        vstr_debugtxt.vint_debugindex += vint_temp
                        vint_debugindex ++

                        vint_assembledDataNextIndex ++
                        vint_currentaddress ++
                        continue cnt+1

                    }

                loop

                continue cnt+1

            }

            if ( vstr_code.1 == "&DW" ) {

                repeat -1, 2

                    if ( vstr_code.cnt == "" ) : break
                    if ( instr( vstr_code.cnt, 0, ";" ) == 0 ) : break

                    if ( instr( vstr_code.cnt, 0, "@" ) == 0 ) {

                        vint_temp = cnt

                        repeat length2( vtable_enum )

                            if ( vtable_enum.0.cnt == vstr_code.vint_temp ) {

                                wpoke vbin_assembledData, vint_assembledDataNextIndex, int( vtable_enum.1.cnt )

                                vstr_debugtxt.vint_debugindex += strf( "%08X:", vint_originaddr )
                                vstr_debugtxt.vint_debugindex += strf( "%08X    ", vint_assembledDataNextIndex )
                                vstr_debugtxt.vint_debugindex += int( vtable_enum.1.cnt )
                                vint_debugindex ++

                                break

                            }

                        loop

                        vint_assembledDataNextIndex += 2
                        vint_currentaddress += 2
                        continue cnt+1

                    }

                    if ( instr( vstr_code.cnt, 0, "\"" ) == 0 ) {

                        wpoke vbin_assembledData, vint_assembledDataNextIndex, strtrim( vstr_code.cnt, 0, '\"' )
                        vstr_debugtxt.vint_debugindex += strf( "%08X:", vint_originaddr )
                        vstr_debugtxt.vint_debugindex += strf( "%08X    ", vint_assembledDataNextIndex )
                        vstr_debugtxt.vint_debugindex += strtrim( vstr_code.cnt, 0, '\"' )
                        vint_debugindex ++
                        vint_assembledDataNextIndex += strsize
                        vint_currentaddress += strsize
                        continue cnt+1

                    } else {

                        vint_temp = intdh( vstr_code.cnt )

                        if ( vint_temp > 0xFFFF ) {

                            putmes_msglib "Error: &DW invaild value.\n"
                            stop

                        }

                        wpoke vbin_assembledData, vint_assembledDataNextIndex, vint_temp
                        vstr_debugtxt.vint_debugindex += strf( "%08X:", vint_originaddr )
                        vstr_debugtxt.vint_debugindex += strf( "%08X    ", vint_assembledDataNextIndex )
                        vstr_debugtxt.vint_debugindex += vint_temp
                        vint_debugindex ++

                        vint_assembledDataNextIndex += 2
                        vint_currentaddress += 2
                        continue cnt+1

                    }

                loop

                continue cnt+1

            }

        }

        // set label
        if ( ( instr( vstr_code.1, 0, ":" ) == strlen( vstr_code.1 ) -1 ) ) {

            vtable_label.0.vint_labelIndex = vstr_code.1
            vtable_label.1.vint_labelIndex = str( vint_currentaddress + vint_originaddr )

            vstr_debugtxt.vint_debugindex += strf( "%08X:", vint_originaddr )
            vstr_debugtxt.vint_debugindex += strf( "%08X    ", vint_currentaddress )
            vstr_debugtxt.vint_debugindex += vstr_code.1
            vint_debugindex += 2

            vint_labelIndex ++

            continue cnt+1

        }

        // comment out
        if ( ( instr( vstr_code.1, 0, ";" ) == 0 ) ) {

            continue cnt+1

        }

        // define parameter cnt and command size

        vtable_type.0.cnt = SIZE_BYTE
        vtable_type.1.cnt = PRM_VALUE
        vtable_type.2.cnt = PRM_VALUE
        vint_this2ndprmIsByte = 0

        vstr_debugtxt.vint_debugindex += strf( "%08X:", vint_originaddr )
        vstr_debugtxt.vint_debugindex += strf( "%08X    ", vint_assembledDataNextIndex )

        if ( ( vstr_code.2 == "" ) or ( vstr_code.2 == ";" ) ) {

            vstr_debugtxt.vint_debugindex += vstr_code.1

        } else {

            if ( ( vstr_code.3 == "" ) or ( vstr_code.3 == ";" ) ) {

                vstr_debugtxt.vint_debugindex += ""+ vstr_code.1 +" "+ vstr_code.2

            } else {

                if ( ( vstr_code.4 == "" ) or ( vstr_code.4 == ";" ) ) {

                    vstr_debugtxt.vint_debugindex += ""+ vstr_code.1 +" "+ vstr_code.2 +", "+ vstr_code.3

                }

            }

        }
        
        vint_debugindex ++

        // no parameter
        if ( ( vstr_code.2 == "" ) or ( vstr_code.2 == ";" ) ) {
            
            vtable_type.0.cnt = SIZE_NONE
            vtable_type.1.cnt = PRM_NULL
            vtable_type.2.cnt = PRM_NULL

            vtable_type.3.cnt = vint_currentaddress
            vint_currentaddress += 2

            switch vtable_type.0.cnt
            case SIZE_NONE
    
                foreach vtable_com_nonetable
    
                    if ( vstr_code.1 == vtable_com_nonetable.cnt ) {
    
                        poke vbin_assembledData, vint_assembledDataNextIndex, cnt
                        vint_assembledDataNextIndex ++
    
                        vint_temp.0 = 0
                        vint_temp.0 += vtable_type.1.vint_thisNoteIndex << 4
                        vint_temp.0 += vtable_type.2.vint_thisNoteIndex
    
                        poke vbin_assembledData, vint_assembledDataNextIndex, vint_temp.0
                        vint_assembledDataNextIndex ++
    
                    }
    
                loop
            
            swbreak
            swend

            continue cnt+1

        }

        //value


        // memory

        if ( instr( vstr_code.2, 0, "WORD[" ) == 0 ) {

            vtable_type.0.cnt = SIZE_WORD
            vtable_type.1.cnt = PRM_MEMORY

        }

        if ( instr( vstr_code.3, 0, "WORD[" ) == 0 ) {

            vtable_type.0.cnt = SIZE_WORD
            vtable_type.2.cnt = PRM_MEMORY

        }

        if ( instr( vstr_code.2, 0, "BYTE[" ) == 0 ) {

            if ( vtable_type.0.cnt != SIZE_WORD ) : vtable_type.0.cnt = SIZE_BYTE
            vtable_type.1.cnt = PRM_MEMORY

        }

        if ( instr( vstr_code.3, 0, "BYTE[" ) == 0 ) {

            if ( vtable_type.0.cnt != SIZE_WORD ) : vtable_type.0.cnt = SIZE_BYTE
            vtable_type.2.cnt = PRM_MEMORY

        }

        //pointer

        foreach vstr_resistorWordTable

            if ( vstr_code.2 == "["+ vstr_resistorWordTable.cnt +"]" ) {

                vtable_type.0.vint_thisNoteIndex = SIZE_WORD
                vtable_type.1.vint_thisNoteIndex = PRM_POINTER

            }

            if ( vstr_code.3 == "["+ vstr_resistorWordTable.cnt +"]" ) {

                vtable_type.0.vint_thisNoteIndex = SIZE_WORD
                vtable_type.2.vint_thisNoteIndex = PRM_POINTER

            }

        loop

        foreach vstr_resistorByteHighTable

            if ( vstr_code.2 == "["+ vstr_resistorByteHighTable.cnt +"]" ) {

                if ( vtable_type.0.vint_thisNoteIndex != SIZE_WORD ) : vtable_type.0.vint_thisNoteIndex = SIZE_BYTE
                vtable_type.1.vint_thisNoteIndex = PRM_POINTER

            }

            if ( vstr_code.3 == "["+ vstr_resistorByteHighTable.cnt +"]" ) {

                if ( vtable_type.0.vint_thisNoteIndex != SIZE_WORD ) : vtable_type.0.vint_thisNoteIndex = SIZE_BYTE
                vtable_type.2.vint_thisNoteIndex = PRM_POINTER
                vint_this2ndprmIsByte = SIZE_BYTE

            }

        loop

        foreach vstr_resistorByteLowTable

            if ( vstr_code.2 == "["+ vstr_resistorByteLowTable.cnt +"]" ) {

                if ( vtable_type.0.vint_thisNoteIndex != SIZE_WORD ) : vtable_type.0.vint_thisNoteIndex = SIZE_BYTE
                vtable_type.1.vint_thisNoteIndex = PRM_POINTER

            }

            if ( vstr_code.3 == "["+ vstr_resistorByteLowTable.cnt +"]" ) {

                if ( vtable_type.0.vint_thisNoteIndex != SIZE_WORD ) : vtable_type.0.vint_thisNoteIndex = SIZE_BYTE
                vtable_type.2.vint_thisNoteIndex = PRM_POINTER
                vint_this2ndprmIsByte = SIZE_BYTE

            }


        loop

        //resistor

        foreach vstr_resistorWordTable

            if ( vstr_code.2 == vstr_resistorWordTable.cnt ) {

                vtable_type.0.vint_thisNoteIndex = SIZE_WORD
                vtable_type.1.vint_thisNoteIndex = PRM_RESISTOR

            }

            if ( vstr_code.3 == vstr_resistorWordTable.cnt ) {

                vtable_type.0.vint_thisNoteIndex = SIZE_WORD
                vtable_type.2.vint_thisNoteIndex = PRM_RESISTOR

            }

        loop

        foreach vstr_resistorByteHighTable

            if ( vstr_code.2 == vstr_resistorByteHighTable.cnt ) {

                if ( vtable_type.0.vint_thisNoteIndex != SIZE_WORD ) : vtable_type.0.vint_thisNoteIndex = SIZE_BYTE
                vtable_type.1.vint_thisNoteIndex = PRM_RESISTOR

            }

            if ( vstr_code.3 == vstr_resistorByteHighTable.cnt ) {

                if ( vtable_type.0.vint_thisNoteIndex != SIZE_WORD ) : vtable_type.0.vint_thisNoteIndex = SIZE_BYTE
                vtable_type.2.vint_thisNoteIndex = PRM_RESISTOR
                vint_this2ndprmIsByte = SIZE_BYTE

            }

        loop

        foreach vstr_resistorByteLowTable

            if ( vstr_code.2 == vstr_resistorByteLowTable.cnt ) {

                if ( vtable_type.0.vint_thisNoteIndex != SIZE_WORD ) : vtable_type.0.vint_thisNoteIndex = SIZE_BYTE
                vtable_type.1.vint_thisNoteIndex = PRM_RESISTOR

            }

            if ( vstr_code.3 == vstr_resistorByteLowTable.cnt ) {

                if ( vtable_type.0.vint_thisNoteIndex != SIZE_WORD ) : vtable_type.0.vint_thisNoteIndex = SIZE_BYTE
                vtable_type.2.vint_thisNoteIndex = PRM_RESISTOR
                vint_this2ndprmIsByte = SIZE_BYTE

            }

        loop

        // one param
        if ( ( vstr_code.3 == "" ) or ( vstr_code.3 == ";" ) ) {

            if ( ( vtable_type.0.cnt == SIZE_BYTE ) and ( vtable_type.1.cnt == PRM_VALUE ) ) {

                vtable_type.0.cnt == SIZE_WORD

            }

            vtable_type.2.cnt = PRM_NULL
            vtable_type.3.cnt = vint_currentaddress
            vint_currentaddress += 4

        } else {

            vtable_type.3.cnt = vint_currentaddress
            vint_currentaddress += 6

        }

        // replace commnad
        repeat length2( vtable_com_transform )

            if ( vstr_code.1 == vtable_com_transform.0.cnt ) {

                vstr_code.1 == vtable_com_transform.1.cnt
                break

            }

        loop

        // convert mnemonic to binary opecode

        switch vtable_type.0.cnt
        case SIZE_NONE

            foreach vtable_com_nonetable

                if ( vstr_code.1 == vtable_com_nonetable.cnt ) {

                    poke vbin_assembledData, vint_assembledDataNextIndex, cnt
                    vint_assembledDataNextIndex ++

                    vint_temp.0 = 0
                    vint_temp.0 += vtable_type.1.vint_thisNoteIndex << 4
                    vint_temp.0 += vtable_type.2.vint_thisNoteIndex

                    poke vbin_assembledData, vint_assembledDataNextIndex, vint_temp.0
                    vint_assembledDataNextIndex ++

                    break

                }

            loop
        
        swbreak
        case SIZE_WORD

            foreach vtable_com_wordtable

                if ( vstr_code.1 == vtable_com_wordtable.cnt ) {

                    //code
                    poke vbin_assembledData, vint_assembledDataNextIndex, cnt
                    vint_assembledDataNextIndex ++

                    vint_temp.0 = 0
                    vint_temp.0 += vtable_type.1.vint_thisNoteIndex << 4
                    vint_temp.0 += vtable_type.2.vint_thisNoteIndex

                    //prmdata
                    poke vbin_assembledData, vint_assembledDataNextIndex, vint_temp.0
                    vint_assembledDataNextIndex ++

                    //prm1
                    if ( vtable_type.1.vint_thisNoteIndex == PRM_RESISTOR ) {

                        foreach vtable_res_WordTable

                            if ( vstr_code.2 == vtable_res_WordTable.cnt ) {

                                wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                vint_assembledDataNextIndex += 2

                                break

                            }

                        loop

                    }

                    if ( vtable_type.1.vint_thisNoteIndex == PRM_POINTER ) {

                        foreach vtable_res_WordTable

                            if ( vstr_code.2 == "["+ vtable_res_WordTable.cnt +"]" ) {

                                wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                vint_assembledDataNextIndex += 2

                                break

                            }

                        loop

                    }

                    if ( vtable_type.1.vint_thisNoteIndex == PRM_MEMORY ) {

                        vint_prmfinished = 0

                        if ( instr( vstr_code.2, 0, ":" ) == strlen( vstr_code.2 ) -1 ) {

                            vtable_labeluse.0.vint_labeluseIndex = strmid( vstr_code.2, 5, strlen(vstr_code.2) -6 )
                            vtable_labeluse.1.vint_labeluseIndex = str( vint_assembledDataNextIndex )
                            vint_labeluseIndex ++
                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( instr( vstr_code.2, 0, "@" ) == 5 ) {

                            repeat length2( vtable_enum )

                                if ( vtable_enum.0.cnt == strmid( vstr_code.2, 5, strlen(vstr_code.2) -6 ) ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, int( vtable_enum.1.cnt )
                                    break

                                }

                            loop

                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( vint_prmfinished == 0 ) {

                            wpoke vbin_assembledData, vint_assembledDataNextIndex, intdh( strmid( vstr_code.2, 5, strlen(vstr_code.2) -6 ) )
                            vint_assembledDataNextIndex += 2

                        }

                    }

                    if ( vtable_type.1.vint_thisNoteIndex == PRM_VALUE ) {

                        vint_prmfinished = 0

                        if ( instr( vstr_code.2, 0, ":" ) == strlen( vstr_code.2 ) -1 ) {

                            vtable_labeluse.0.vint_labeluseIndex = vstr_code.2
                            vtable_labeluse.1.vint_labeluseIndex = str( vint_assembledDataNextIndex )
                            vint_labeluseIndex ++
                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( instr( vstr_code.2, 0, "@" ) == 0 ) {

                            repeat length2( vtable_enum )

                                if ( vtable_enum.0.cnt == vstr_code.2 ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, int( vtable_enum.1.cnt )
                                    break

                                }

                            loop

                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( vint_prmfinished == 0 ) {

                            wpoke vbin_assembledData, vint_assembledDataNextIndex, intdh( vstr_code.2 )
                            vint_assembledDataNextIndex += 2

                        }

                    }

                    //prm2
                    if ( vtable_type.2.vint_thisNoteIndex == PRM_NULL ) {

                    }

                    if ( vtable_type.2.vint_thisNoteIndex == PRM_RESISTOR ) {

                        if ( vint_this2ndprmIsByte == SIZE_BYTE ) {

                            foreach vtable_res_ByteHighTable

                                if ( vstr_code.3 == vtable_res_ByteHighTable.cnt ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                    vint_assembledDataNextIndex += 2
                                    break

                                }

                            loop

                            foreach vtable_res_ByteLowTable

                                if ( vstr_code.3 == vtable_res_ByteLowTable.cnt ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                    vint_assembledDataNextIndex += 2
                                    break

                                }

                            loop   

                        } else {

                            foreach vtable_res_WordTable

                                if ( vstr_code.3 == vtable_res_WordTable.cnt ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                    vint_assembledDataNextIndex += 2

                                    break

                                }

                            loop

                        }

                    }

                    if ( vtable_type.2.vint_thisNoteIndex == PRM_POINTER ) {

                        if ( vint_this2ndprmIsByte == SIZE_BYTE ) {

                            foreach vtable_res_ByteHighTable

                                if ( vstr_code.3 == "["+ vtable_res_ByteHighTable.cnt +"]" ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                    vint_assembledDataNextIndex += 2

                                    break

                                }

                            loop

                            foreach vtable_res_ByteLowTable

                                if ( vstr_code.3 == "["+ vtable_res_ByteLowTable.cnt +"]" ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                    vint_assembledDataNextIndex += 2

                                    break

                                }

                            loop
                            
                        } else {

                            foreach vtable_res_WordTable

                                if ( vstr_code.3 == "["+ vtable_res_WordTable.cnt +"]" ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                    vint_assembledDataNextIndex += 2

                                    break

                                }

                            loop

                        }

                    }

                    if ( vtable_type.2.vint_thisNoteIndex == PRM_MEMORY ) {

                        vint_prmfinished = 0

                        if ( instr( vstr_code.3, 0, ":" ) == strlen( vstr_code.3 ) -1 ) {

                            vtable_labeluse.0.vint_labeluseIndex = strmid( vstr_code.3, 5, strlen(vstr_code.3) -6 )
                            vtable_labeluse.1.vint_labeluseIndex = str( vint_assembledDataNextIndex )
                            vint_labeluseIndex ++
                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( instr( vstr_code.3, 0, "@" ) == 5 ) {

                            repeat length2( vtable_enum )

                                if ( vtable_enum.0.cnt == strmid( vstr_code.3, 5, strlen(vstr_code.3) -6 ) ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, int( vtable_enum.1.cnt )
                                    break

                                }

                            loop

                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( vint_prmfinished == 0 ) {

                            wpoke vbin_assembledData, vint_assembledDataNextIndex, intdh( strmid( vstr_code.3, 5, strlen(vstr_code.3) -6 ) )
                            vint_assembledDataNextIndex += 2

                        }

                    }

                    if ( vtable_type.2.vint_thisNoteIndex == PRM_VALUE ) {

                        vint_prmfinished = 0

                        if ( instr( vstr_code.3, 0, ":" ) == strlen( vstr_code.3 ) -1 ) {

                            vtable_labeluse.0.vint_labeluseIndex = vstr_code.3
                            vtable_labeluse.1.vint_labeluseIndex = str( vint_assembledDataNextIndex )
                            vint_labeluseIndex ++
                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( instr( vstr_code.3, 0, "@" ) == 0 ) {

                            repeat length2( vtable_enum )

                                if ( vtable_enum.0.cnt == vstr_code.3 ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, int( vtable_enum.1.cnt )
                                    break

                                }

                            loop

                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( vint_prmfinished == 0 ) {

                            wpoke vbin_assembledData, vint_assembledDataNextIndex, intdh( vstr_code.3 )
                            vint_assembledDataNextIndex += 2

                        }

                    }

                    break

                }

            loop

        swbreak
        case SIZE_BYTE

            foreach vtable_com_byteTable

                if ( vstr_code.1 == vtable_com_byteTable.cnt ) {

                    //code
                    poke vbin_assembledData, vint_assembledDataNextIndex, cnt
                    vint_assembledDataNextIndex ++

                    vint_temp.0 = 0
                    vint_temp.0 += vtable_type.1.vint_thisNoteIndex << 4
                    vint_temp.0 += vtable_type.2.vint_thisNoteIndex

                    //prmdata
                    poke vbin_assembledData, vint_assembledDataNextIndex, vint_temp.0
                    vint_assembledDataNextIndex ++

                    //prm1
                    if ( vtable_type.1.vint_thisNoteIndex == PRM_RESISTOR ) {

                        foreach vtable_res_byteHighTable

                            if ( vstr_code.2 == vtable_res_byteHighTable.cnt ) {

                                wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                vint_assembledDataNextIndex += 2
                                break

                            }

                        loop

                        foreach vtable_res_ByteLowTable

                            if ( vstr_code.2 == vtable_res_ByteLowTable.cnt ) {

                                wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                vint_assembledDataNextIndex += 2

                                break

                            }

                        loop

                    }

                    if ( vtable_type.1.vint_thisNoteIndex == PRM_POINTER ) {

                        foreach vtable_res_ByteHighTable

                            if ( vstr_code.2 == "["+ vtable_res_ByteHighTable.cnt +"]" ) {

                                wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                vint_assembledDataNextIndex += 2

                                break

                            }

                        loop

                        foreach vtable_res_ByteLowTable

                            if ( vstr_code.2 == "["+ vtable_res_ByteLowTable.cnt +"]" ) {

                                wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                vint_assembledDataNextIndex += 2

                                break

                            }

                        loop

                    }

                    if ( vtable_type.1.vint_thisNoteIndex == PRM_MEMORY ) {

                        vint_prmfinished = 0

                        if ( instr( vstr_code.2, 0, ":" ) == strlen( vstr_code.2 ) -1 ) {

                            vtable_labeluse.0.vint_labeluseIndex = strmid( vstr_code.2, 5, strlen(vstr_code.2) -6 )
                            vtable_labeluse.1.vint_labeluseIndex = str( vint_assembledDataNextIndex )
                            vint_labeluseIndex ++
                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( instr( vstr_code.2, 0, "@" ) == 5 ) {

                            repeat length2( vtable_enum )

                                if ( vtable_enum.0.cnt == strmid( vstr_code.2, 5, strlen(vstr_code.2) -6 ) ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, int( vtable_enum.1.cnt )
                                    break

                                }

                            loop

                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( vint_prmfinished == 0 ) {

                            wpoke vbin_assembledData, vint_assembledDataNextIndex, intdh( strmid( vstr_code.2, 5, strlen(vstr_code.2) -6 ) )
                            vint_assembledDataNextIndex += 2

                        }

                    }

                    if ( vtable_type.1.vint_thisNoteIndex == PRM_VALUE ) {

                        vint_prmfinished = 0

                        if ( instr( vstr_code.2, 0, ":" ) == strlen( vstr_code.2 ) -1 ) {

                            vtable_labeluse.0.vint_labeluseIndex = vstr_code.2
                            vtable_labeluse.1.vint_labeluseIndex = str( vint_assembledDataNextIndex )
                            vint_labeluseIndex ++
                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( instr( vstr_code.2, 0, "@" ) == 0 ) {

                            repeat length2( vtable_enum )

                                if ( vtable_enum.0.cnt == vstr_code.2 ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, int( vtable_enum.1.cnt )
                                    break

                                }

                            loop

                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( vint_prmfinished == 0 ) {

                            wpoke vbin_assembledData, vint_assembledDataNextIndex, intdh( vstr_code.2 )
                            vint_assembledDataNextIndex += 2

                        }

                    }

                    //prm2
                    if ( vtable_type.2.vint_thisNoteIndex == PRM_NULL ) {

                        

                    }

                    if ( vtable_type.2.vint_thisNoteIndex == PRM_RESISTOR ) {

                        foreach vtable_res_ByteHighTable

                            if ( vstr_code.3 == vtable_res_ByteHighTable.cnt ) {

                                wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                vint_assembledDataNextIndex += 2
                                break

                            }

                        loop

                        foreach vtable_res_ByteLowTable

                            if ( vstr_code.3 == vtable_res_ByteLowTable.cnt ) {

                                wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                vint_assembledDataNextIndex += 2
                                break

                            }

                        loop

                    }

                    if ( vtable_type.2.vint_thisNoteIndex == PRM_POINTER ) {

                        foreach vtable_res_ByteHighTable

                            if ( vstr_code.3 == "["+ vtable_res_ByteHighTable.cnt +"]" ) {

                                wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                vint_assembledDataNextIndex += 2

                                break

                            }

                        loop

                        foreach vtable_res_ByteLowTable

                            if ( vstr_code.3 == "["+ vtable_res_ByteLowTable.cnt +"]" ) {

                                wpoke vbin_assembledData, vint_assembledDataNextIndex, cnt
                                vint_assembledDataNextIndex += 2

                                break

                            }

                        loop

                    }

                    if ( vtable_type.2.vint_thisNoteIndex == PRM_MEMORY ) {

                        vint_prmfinished = 0

                        if ( instr( vstr_code.3, 0, ":" ) == strlen( vstr_code.3 ) -1 ) {

                            vtable_labeluse.0.vint_labeluseIndex = strmid( vstr_code.3, 5, strlen(vstr_code.3) -6 )
                            vtable_labeluse.1.vint_labeluseIndex = str( vint_assembledDataNextIndex )
                            vint_labeluseIndex ++
                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( instr( vstr_code.3, 0, "@" ) == 5 ) {

                            repeat length2( vtable_enum )

                                if ( vtable_enum.0.cnt == strmid( vstr_code.3, 5, strlen(vstr_code.3) -6 ) ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, int( vtable_enum.1.cnt )
                                    break

                                }

                            loop

                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( vint_prmfinished == 0 ) {

                            wpoke vbin_assembledData, vint_assembledDataNextIndex, intdh( strmid( vstr_code.3, 5, strlen(vstr_code.3) -6 ) )
                            vint_assembledDataNextIndex += 2

                        }

                    }

                    if ( vtable_type.2.vint_thisNoteIndex == PRM_VALUE ) {

                        vint_prmfinished = 0

                        if ( instr( vstr_code.3, 0, ":" ) == strlen( vstr_code.3 ) -1 ) {

                            vtable_labeluse.0.vint_labeluseIndex = vstr_code.3
                            vtable_labeluse.1.vint_labeluseIndex = str( vint_assembledDataNextIndex )
                            vint_labeluseIndex ++
                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( instr( vstr_code.3, 0, "@" ) == 0 ) {

                            repeat length2( vtable_enum )

                                if ( vtable_enum.0.cnt == vstr_code.3 ) {

                                    wpoke vbin_assembledData, vint_assembledDataNextIndex, int( vtable_enum.1.cnt )
                                    break

                                }

                            loop

                            vint_assembledDataNextIndex += 2
                            vint_prmfinished = 1

                        }

                        if ( vint_prmfinished == 0 ) {

                            wpoke vbin_assembledData, vint_assembledDataNextIndex, intdh( vstr_code.3 )
                            vint_assembledDataNextIndex += 2

                        }

                    }

                    break

                }

            loop

        swbreak
        swend

        await WAITMS

    loop

    // 2nd pass

    putmes_msglib "Assembler: 2nd passing...\n"

    // convert label to binary address
    repeat length2( vtable_labeluse )

        if ( vtable_labeluse.0.cnt == "" ) : break
        vint_thisNoteIndex = cnt

        repeat length2( vtable_label )

            if ( vtable_label.0.cnt == "" ) {

                putmes_msglib "Assembler: This label is undefined. (Name:"+ vtable_labeluse.0.vint_thisNoteIndex +")\n"
                stop

            }
            if ( vtable_labeluse.0.vint_thisNoteIndex == vtable_label.0.cnt ) {

                wpoke vbin_assembledData, int( vtable_labeluse.1.vint_thisNoteIndex ), int( vtable_label.1.cnt )
                putmes_msglib "Assembler: Over writed address. (Name:"+ vtable_label.0.cnt +" Value:"+ strf( "%04Xh", vtable_label.1.cnt ) +" at:"+ strf( "%04Xh", vtable_labeluse.1.vint_thisNoteIndex ) +")\n"

                break

            }

        loop

        if ( cnt \ WAITCNT ) : await WAITMS

    loop

    // finish
    putmes_msglib "Assemble has competed. Saved binary file at \""+ vstr_filename +"\".\n"

    bsave vstr_filename, vbin_assembledData, vint_currentaddress

    vstr_debugtxt_output = ""

    foreach vstr_debugtxt

        vstr_debugtxt_output += vstr_debugtxt.cnt +"\n"

    loop

    notesel vstr_debugtxt_output
    notesave getpath( vstr_filename, 1 ) +".dbg"

    if ( vint_cmdmode ) {

        end 0

    } else {

        dialog "complete"
        stop

    }